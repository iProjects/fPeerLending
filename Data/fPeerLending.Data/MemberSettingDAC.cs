//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by francis.muraya at KPC0201M on 11/17/2014 14:47:55 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fPeerLending.Entities;

namespace fPeerLending.Data
{
    /// <summary>
    /// MemberSettings data access component. Manages CRUD operations for the MemberSettings table.
    /// </summary>
    public partial class MemberSettingDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the MemberSettings table.
        /// </summary>
        /// <param name="memberSetting">A MemberSetting object.</param>
        /// <returns>An updated MemberSetting object.</returns>
        public MemberSetting Create(MemberSetting memberSetting)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.MemberSettings ([Member], [SSKey], [SSValue], [SSValueType], [Description], [SGroup], [SSSystem]) " +
                "VALUES(@Member, @SSKey, @SSValue, @SSValueType, @Description, @SGroup, @SSSystem);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Member", DbType.Int32, memberSetting.Member);
                db.AddInParameter(cmd, "@SSKey", DbType.AnsiString, memberSetting.SSKey);
                db.AddInParameter(cmd, "@SSValue", DbType.AnsiString, memberSetting.SSValue);
                db.AddInParameter(cmd, "@SSValueType", DbType.AnsiString, memberSetting.SSValueType);
                db.AddInParameter(cmd, "@Description", DbType.AnsiString, memberSetting.Description);
                db.AddInParameter(cmd, "@SGroup", DbType.Int32, memberSetting.SGroup);
                db.AddInParameter(cmd, "@SSSystem", DbType.Boolean, memberSetting.SSSystem);

                db.ExecuteNonQuery(cmd);
            }

            return memberSetting;
        }

        /// <summary>
        /// Updates an existing row in the MemberSettings table.
        /// </summary>
        /// <param name="memberSetting">A MemberSetting entity object.</param>
        public void UpdateById(MemberSetting memberSetting)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.MemberSettings " +
                "SET " +
                    "[SSValue]=@SSValue, " +
                    "[SSValueType]=@SSValueType, " +
                    "[Description]=@Description, " +
                    "[SGroup]=@SGroup, " +
                    "[SSSystem]=@SSSystem " +
                "WHERE [Member]=@Member " +
                      "AND [SSKey]=@SSKey ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@SSValue", DbType.AnsiString, memberSetting.SSValue);
                db.AddInParameter(cmd, "@SSValueType", DbType.AnsiString, memberSetting.SSValueType);
                db.AddInParameter(cmd, "@Description", DbType.AnsiString, memberSetting.Description);
                db.AddInParameter(cmd, "@SGroup", DbType.Int32, memberSetting.SGroup);
                db.AddInParameter(cmd, "@SSSystem", DbType.Boolean, memberSetting.SSSystem);
                db.AddInParameter(cmd, "@Member", DbType.Int32, memberSetting.Member);
                db.AddInParameter(cmd, "@SSKey", DbType.AnsiString, memberSetting.SSKey);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the MemberSettings table.
        /// </summary>
        /// <param name="member">A member value.</param>
        public void DeleteById(int member)
        {
            const string SQL_STATEMENT = "DELETE dbo.MemberSettings " +
                                         "WHERE [Member]=@Member ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Member", DbType.Int32, member);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the MemberSettings table.
        /// </summary>
        /// <param name="member">A Member value.</param>
        /// <param name="sSKey">A SSKey value.</param>
        /// <returns>A MemberSetting object with data populated from the database.</returns>
        public MemberSetting SelectById(int member, string sSKey)
        {
            const string SQL_STATEMENT =
                "SELECT [Member], [SSKey], [SSValue], [SSValueType], [Description], [SGroup], [SSSystem]" +
                        " " +
                "FROM dbo.MemberSettings  " +
                "WHERE [Member]=@Member " +
                      "AND [SSKey]=@SSKey ";

            MemberSetting memberSetting = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Member", DbType.Int32, member);
                db.AddInParameter(cmd, "@SSKey", DbType.AnsiString, sSKey);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new MemberSetting
                        memberSetting = new MemberSetting();

                        // Read values.
                        memberSetting.Member = base.GetDataValue<int>(dr, "Member");
                        memberSetting.SSKey = base.GetDataValue<string>(dr, "SSKey");
                        memberSetting.SSValue = base.GetDataValue<string>(dr, "SSValue");
                        memberSetting.SSValueType = base.GetDataValue<string>(dr, "SSValueType");
                        memberSetting.Description = base.GetDataValue<string>(dr, "Description");
                        memberSetting.SGroup = base.GetDataValue<int>(dr, "SGroup");
                        memberSetting.SSSystem = base.GetDataValue<bool>(dr, "SSSystem");
                    }
                }
            }

            return memberSetting;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the MemberSettings table.
        /// </summary>
        /// <returns>A collection of MemberSetting objects.</returns>		
        public List<MemberSetting> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Member], [SSKey], [SSValue], [SSValueType], [Description], [SGroup], [SSSystem]" +
                        " " +
                "FROM dbo.MemberSettings ";

            List<MemberSetting> result = new List<MemberSetting>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new MemberSetting
                        MemberSetting memberSetting = new MemberSetting();

                        // Read values.
                        memberSetting.Member = base.GetDataValue<int>(dr, "Member");
                        memberSetting.SSKey = base.GetDataValue<string>(dr, "SSKey");
                        memberSetting.SSValue = base.GetDataValue<string>(dr, "SSValue");
                        memberSetting.SSValueType = base.GetDataValue<string>(dr, "SSValueType");
                        memberSetting.Description = base.GetDataValue<string>(dr, "Description");
                        memberSetting.SGroup = base.GetDataValue<int>(dr, "SGroup");
                        memberSetting.SSSystem = base.GetDataValue<bool>(dr, "SSSystem");

                        // Add to List.
                        result.Add(memberSetting);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the MemberSettings table.
        /// </summary>
        /// <param name="member">A member value.</param>
        /// <returns>A collection of MemberSetting objects.</returns>		
        public List<MemberSetting> SelectByMember(int member)
        {
            const string SQL_STATEMENT =
                "SELECT [Member], [SSKey], [SSValue], [SSValueType], [Description], [SGroup], [SSSystem]" +
                        " " +
                "FROM dbo.MemberSettings " +
                "WHERE [Member]=@Member ";

            List<MemberSetting> result = new List<MemberSetting>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {

                db.AddInParameter(cmd, "@Member", DbType.Int32, member);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new MemberSetting
                        MemberSetting memberSetting = new MemberSetting();

                        // Read values.
                        memberSetting.Member = base.GetDataValue<int>(dr, "Member");
                        memberSetting.SSKey = base.GetDataValue<string>(dr, "SSKey");
                        memberSetting.SSValue = base.GetDataValue<string>(dr, "SSValue");
                        memberSetting.SSValueType = base.GetDataValue<string>(dr, "SSValueType");
                        memberSetting.Description = base.GetDataValue<string>(dr, "Description");
                        memberSetting.SGroup = base.GetDataValue<int>(dr, "SGroup");
                        memberSetting.SSSystem = base.GetDataValue<bool>(dr, "SSSystem");

                        // Add to List.
                        result.Add(memberSetting);
                    }
                }
            }

            return result;
        }
    }
}

