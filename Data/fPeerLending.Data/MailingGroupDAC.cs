//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by francis.muraya at KPC0201M on 11/20/2014 15:48:06 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fPeerLending.Entities;

namespace fPeerLending.Data
{
    /// <summary>
    /// MailingGroups data access component. Manages CRUD operations for the MailingGroups table.
    /// </summary>
    public partial class MailingGroupDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the MailingGroups table.
        /// </summary>
        /// <param name="mailingGroup">A MailingGroup object.</param>
        /// <returns>An updated MailingGroup object.</returns>
        public MailingGroup Create(MailingGroup mailingGroup)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.MailingGroups ([ParentGroupId], [ShortCode], [Creator], [CreatedOn], [LastModified]) " +
                "VALUES(@ParentGroupId, @ShortCode, @Creator, @CreatedOn, @LastModified); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ParentGroupId", DbType.Int32, mailingGroup.ParentGroupId);
                db.AddInParameter(cmd, "@ShortCode", DbType.AnsiString, mailingGroup.ShortCode);
                db.AddInParameter(cmd, "@Creator", DbType.Int32, mailingGroup.Creator);
                db.AddInParameter(cmd, "@CreatedOn", DbType.DateTime2, mailingGroup.CreatedOn);
                db.AddInParameter(cmd, "@LastModified", DbType.DateTime2, mailingGroup.LastModified);

                // Get the primary key value.
                mailingGroup.GroupId = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return mailingGroup;
        }

        /// <summary>
        /// Updates an existing row in the MailingGroups table.
        /// </summary>
        /// <param name="mailingGroup">A MailingGroup entity object.</param>
        public void UpdateById(MailingGroup mailingGroup)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.MailingGroups " +
                "SET " +
                    "[ParentGroupId]=@ParentGroupId, " +
                    "[ShortCode]=@ShortCode, " +
                    "[Creator]=@Creator, " +
                    "[CreatedOn]=@CreatedOn, " +
                    "[LastModified]=@LastModified " +
                "WHERE [GroupId]=@GroupId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ParentGroupId", DbType.Int32, mailingGroup.ParentGroupId);
                db.AddInParameter(cmd, "@ShortCode", DbType.AnsiString, mailingGroup.ShortCode);
                db.AddInParameter(cmd, "@Creator", DbType.Int32, mailingGroup.Creator);
                db.AddInParameter(cmd, "@CreatedOn", DbType.DateTime2, mailingGroup.CreatedOn);
                db.AddInParameter(cmd, "@LastModified", DbType.DateTime2, mailingGroup.LastModified);
                db.AddInParameter(cmd, "@GroupId", DbType.Int32, mailingGroup.GroupId);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the MailingGroups table.
        /// </summary>
        /// <param name="groupId">A groupId value.</param>
        public void DeleteById(int groupId)
        {
            const string SQL_STATEMENT = "DELETE dbo.MailingGroups " +
                                         "WHERE [GroupId]=@GroupId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@GroupId", DbType.Int32, groupId);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the MailingGroups table.
        /// </summary>
        /// <param name="groupId">A GroupId value.</param>
        /// <returns>A MailingGroup object with data populated from the database.</returns>
        public MailingGroup SelectById(int groupId)
        {
            const string SQL_STATEMENT =
                "SELECT [GroupId], [ParentGroupId], [ShortCode], [Creator], [CreatedOn], [LastModified]" +
                        " " +
                "FROM dbo.MailingGroups  " +
                "WHERE [GroupId]=@GroupId ";

            MailingGroup mailingGroup = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@GroupId", DbType.Int32, groupId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new MailingGroup
                        mailingGroup = new MailingGroup();

                        // Read values.
                        mailingGroup.GroupId = base.GetDataValue<int>(dr, "GroupId");
                        mailingGroup.ParentGroupId = base.GetDataValue<int>(dr, "ParentGroupId");
                        mailingGroup.ShortCode = base.GetDataValue<string>(dr, "ShortCode");
                        mailingGroup.Creator = base.GetDataValue<int>(dr, "Creator");
                        mailingGroup.CreatedOn = base.GetDataValue<DateTime>(dr, "CreatedOn");
                        mailingGroup.LastModified = base.GetDataValue<DateTime>(dr, "LastModified");
                    }
                }
            }

            return mailingGroup;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the MailingGroups table.
        /// </summary>
        /// <returns>A collection of MailingGroup objects.</returns>		
        public List<MailingGroup> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [GroupId], [ParentGroupId], [ShortCode], [Creator], [CreatedOn], [LastModified]" +
                        " " +
                "FROM dbo.MailingGroups ";

            List<MailingGroup> result = new List<MailingGroup>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new MailingGroup
                        MailingGroup mailingGroup = new MailingGroup();

                        // Read values.
                        mailingGroup.GroupId = base.GetDataValue<int>(dr, "GroupId");
                        mailingGroup.ParentGroupId = base.GetDataValue<int>(dr, "ParentGroupId");
                        mailingGroup.ShortCode = base.GetDataValue<string>(dr, "ShortCode");
                        mailingGroup.Creator = base.GetDataValue<int>(dr, "Creator");
                        mailingGroup.CreatedOn = base.GetDataValue<DateTime>(dr, "CreatedOn");
                        mailingGroup.LastModified = base.GetDataValue<DateTime>(dr, "LastModified");

                        // Add to List.
                        result.Add(mailingGroup);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the MailingGroups table.
        /// </summary>
        /// <param name="shortCode">A shortCode value.</param>
        /// <returns>A collection of MailingGroup objects.</returns>		
        public List<MailingGroup> SelectByShortCode(string shortCode)
        {
            const string SQL_STATEMENT =
                "SELECT [GroupId], [ParentGroupId], [ShortCode], [Creator], [CreatedOn], [LastModified]" +
                        " " +
                "FROM dbo.MailingGroups " +
                "WHERE [ShortCode]=@ShortCode ";

            List<MailingGroup> result = new List<MailingGroup>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {

                db.AddInParameter(cmd, "@ShortCode", DbType.AnsiString, shortCode);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new MailingGroup
                        MailingGroup mailingGroup = new MailingGroup();

                        // Read values.
                        mailingGroup.GroupId = base.GetDataValue<int>(dr, "GroupId");
                        mailingGroup.ParentGroupId = base.GetDataValue<int>(dr, "ParentGroupId");
                        mailingGroup.ShortCode = base.GetDataValue<string>(dr, "ShortCode");
                        mailingGroup.Creator = base.GetDataValue<int>(dr, "Creator");
                        mailingGroup.CreatedOn = base.GetDataValue<DateTime>(dr, "CreatedOn");
                        mailingGroup.LastModified = base.GetDataValue<DateTime>(dr, "LastModified");

                        // Add to List.
                        result.Add(mailingGroup);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the MailingGroups table.
        /// </summary>
        /// <param name="shortCode">A shortCode value.</param>
        /// <param name="creator">A creator value.</param>
        /// <returns>A collection of MailingGroup objects.</returns>		
       public MailingGroup SelectByShortCodeMember(string shortCode, int creator)
        {
            const string SQL_STATEMENT =
                "SELECT [GroupId], [ParentGroupId], [ShortCode], [Creator], [CreatedOn], [LastModified]" +
                        " " +
                "FROM dbo.MailingGroups  " +
                "WHERE [ShortCode]=@ShortCode "+
                "AND [Creator]=@Creator  ";

            MailingGroup mailingGroup = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@ShortCode", DbType.AnsiString, shortCode);
                db.AddInParameter(cmd, "@Creator", DbType.Int32, creator);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new MailingGroup
                        mailingGroup = new MailingGroup();

                        // Read values.
                        mailingGroup.GroupId = base.GetDataValue<int>(dr, "GroupId");
                        mailingGroup.ParentGroupId = base.GetDataValue<int>(dr, "ParentGroupId");
                        mailingGroup.ShortCode = base.GetDataValue<string>(dr, "ShortCode");
                        mailingGroup.Creator = base.GetDataValue<int>(dr, "Creator");
                        mailingGroup.CreatedOn = base.GetDataValue<DateTime>(dr, "CreatedOn");
                        mailingGroup.LastModified = base.GetDataValue<DateTime>(dr, "LastModified");
                    }
                }
            }

            return mailingGroup;
        }

        /// <summary>
        /// Returns a count based on the condition.
        /// </summary>
        /// <param name="shortCode">A shortCode value.</param>
        /// <returns>An integer value.</returns>		
        public int CountByShortCode(string shortCode)
        {
            const string SQL_STATEMENT =
                "SELECT COUNT(1) " +
                "FROM dbo.MailingGroups " +
                "WHERE [ShortCode]=@ShortCode ";

            int result = 0;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@ShortCode", DbType.AnsiString, shortCode);

                result = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return result;
        }

        /// <summary>
        /// Returns a count based on the condition.
        /// </summary>
        /// <param name="shortCode">A shortCode value.</param>
        /// <param name="creator">A creator value.</param>
        /// <returns>An integer value.</returns>		
        public int CountByShortCodeMember(string shortCode, int creator)
        {
            const string SQL_STATEMENT =
                "SELECT COUNT(1) " +
                "FROM dbo.MailingGroups " +
                "WHERE [ShortCode]=@ShortCode " +
                      "AND [Creator]=@Creator ";

            int result = 0;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@ShortCode", DbType.AnsiString, shortCode);
                db.AddInParameter(cmd, "@Creator", DbType.Int32, creator);

                result = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the MailingGroups table.
        /// </summary>
        /// <param name="shortCode">A shortCode value.</param>
        /// <returns>A collection of MailingGroup objects.</returns>		
        public List<MailingGroup> SelectByCreator(int creator)
        {
            const string SQL_STATEMENT =
                "SELECT [GroupId], [ParentGroupId], [ShortCode], [Creator], [CreatedOn], [LastModified]" +
                        " " +
                "FROM dbo.MailingGroups " +
                "WHERE [Creator]=@Creator ";

            List<MailingGroup> result = new List<MailingGroup>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Creator", DbType.Int32, creator);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new MailingGroup
                        MailingGroup mailingGroup = new MailingGroup();

                        // Read values.
                        mailingGroup.GroupId = base.GetDataValue<int>(dr, "GroupId");
                        mailingGroup.ParentGroupId = base.GetDataValue<int>(dr, "ParentGroupId");
                        mailingGroup.ShortCode = base.GetDataValue<string>(dr, "ShortCode");
                        mailingGroup.Creator = base.GetDataValue<int>(dr, "Creator");
                        mailingGroup.CreatedOn = base.GetDataValue<DateTime>(dr, "CreatedOn");
                        mailingGroup.LastModified = base.GetDataValue<DateTime>(dr, "LastModified");

                        // Add to List.
                        result.Add(mailingGroup);
                    }
                }
            }

            return result;
        }
    }
}

