//====================================================================================================
// Code generated with Momentum: DAC Gen (Build 2.5.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by francis.muraya at KPC7070W on 09/03/2013 17:12:50 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fPeerLending.Entities;



namespace fPeerLending.Data
{
    /// <summary>
    /// Settings data access component. Manages CRUD operations for the Settings table.
    /// </summary>
    public partial class SettingDAC : DataAccessComponent
    {

        /// <summary>
        /// Conditionally retrieves one or more rows from the Settings table.
        /// </summary>
        /// <returns>A collection of Setting objects.</returns>		
        public List<Setting> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [SSKey], [SSValue], [SSValueType], [Description], [SGroup], [SSSystem] " +
                "FROM dbo.Settings ";

            List<Setting> result = new List<Setting>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Setting
                        Setting setting = new Setting();

                        // Read values.
                        setting.SSKey = base.GetDataValue<string>(dr, "SSKey");
                        setting.SSValue = base.GetDataValue<string>(dr, "SSValue");
                        setting.SSValueType = base.GetDataValue<string>(dr, "SSValueType");
                        setting.Description = base.GetDataValue<string>(dr, "Description");
                        setting.SGroup = base.GetDataValue<int>(dr, "SGroup");
                        setting.SSSystem = base.GetDataValue<bool>(dr, "SSSystem");

                        // Add to List.
                        result.Add(setting);
                    }
                }
            }

            return result;
        }
    }
}
