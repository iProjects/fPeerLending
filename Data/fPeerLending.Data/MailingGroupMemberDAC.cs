//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by francis.muraya at KPC0201M on 11/20/2014 15:48:06 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fPeerLending.Entities;

namespace fPeerLending.Data
{
    /// <summary>
    /// MailingGroupMembers data access component. Manages CRUD operations for the MailingGroupMembers table.
    /// </summary>
    public partial class MailingGroupMemberDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the MailingGroupMembers table.
        /// </summary>
        /// <param name="mailingGroupMember">A MailingGroupMember object.</param>
        /// <returns>An updated MailingGroupMember object.</returns>
        public MailingGroupMember Create(MailingGroupMember mailingGroupMember)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.MailingGroupMembers ([GroupId], [IdType], [Member], [Email], [Telno], [MailingGroup]) " +
                "VALUES(@GroupId, @IdType, @Member, @Email, @Telno, @MailingGroup); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@GroupId", DbType.Int32, mailingGroupMember.GroupId);
                db.AddInParameter(cmd, "@IdType", DbType.AnsiString, mailingGroupMember.IdType);
                db.AddInParameter(cmd, "@Member", DbType.Int32, mailingGroupMember.Member);
                db.AddInParameter(cmd, "@Email", DbType.AnsiString, mailingGroupMember.Email);
                db.AddInParameter(cmd, "@Telno", DbType.AnsiString, mailingGroupMember.Telno);
                db.AddInParameter(cmd, "@MailingGroup", DbType.AnsiString, mailingGroupMember.MailingGroup);

                // Get the primary key value.
                mailingGroupMember.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return mailingGroupMember;
        }

        /// <summary>
        /// Updates an existing row in the MailingGroupMembers table.
        /// </summary>
        /// <param name="mailingGroupMember">A MailingGroupMember entity object.</param>
        public void UpdateById(MailingGroupMember mailingGroupMember)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.MailingGroupMembers " +
                "SET " +
                    "[GroupId]=@GroupId, " +
                    "[IdType]=@IdType, " +
                    "[Member]=@Member, " +
                    "[Email]=@Email, " +
                    "[Telno]=@Telno, " +
                    "[MailingGroup]=@MailingGroup " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@GroupId", DbType.Int32, mailingGroupMember.GroupId);
                db.AddInParameter(cmd, "@IdType", DbType.AnsiString, mailingGroupMember.IdType);
                db.AddInParameter(cmd, "@Member", DbType.Int32, mailingGroupMember.Member);
                db.AddInParameter(cmd, "@Email", DbType.AnsiString, mailingGroupMember.Email);
                db.AddInParameter(cmd, "@Telno", DbType.AnsiString, mailingGroupMember.Telno);
                db.AddInParameter(cmd, "@MailingGroup", DbType.AnsiString, mailingGroupMember.MailingGroup);
                db.AddInParameter(cmd, "@Id", DbType.Int32, mailingGroupMember.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the MailingGroupMembers table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.MailingGroupMembers " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the MailingGroupMembers table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A MailingGroupMember object with data populated from the database.</returns>
        public MailingGroupMember SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [GroupId], [IdType], [Member], [Email], [Telno], [MailingGroup] " +
                "FROM dbo.MailingGroupMembers  " +
                "WHERE [Id]=@Id ";

            MailingGroupMember mailingGroupMember = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new MailingGroupMember
                        mailingGroupMember = new MailingGroupMember();

                        // Read values.
                        mailingGroupMember.Id = base.GetDataValue<int>(dr, "Id");
                        mailingGroupMember.GroupId = base.GetDataValue<int>(dr, "GroupId");
                        mailingGroupMember.IdType = base.GetDataValue<string>(dr, "IdType");
                        mailingGroupMember.Member = base.GetDataValue<int>(dr, "Member");
                        mailingGroupMember.Email = base.GetDataValue<string>(dr, "Email");
                        mailingGroupMember.Telno = base.GetDataValue<string>(dr, "Telno");
                        mailingGroupMember.MailingGroup = base.GetDataValue<string>(dr, "MailingGroup");
                    }
                }
            }

            return mailingGroupMember;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the MailingGroupMembers table.
        /// </summary>
        /// <returns>A collection of MailingGroupMember objects.</returns>		
        public List<MailingGroupMember> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [GroupId], [IdType], [Member], [Email], [Telno], [MailingGroup] " +
                "FROM dbo.MailingGroupMembers ";

            List<MailingGroupMember> result = new List<MailingGroupMember>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new MailingGroupMember
                        MailingGroupMember mailingGroupMember = new MailingGroupMember();

                        // Read values.
                        mailingGroupMember.Id = base.GetDataValue<int>(dr, "Id");
                        mailingGroupMember.GroupId = base.GetDataValue<int>(dr, "GroupId");
                        mailingGroupMember.IdType = base.GetDataValue<string>(dr, "IdType");
                        mailingGroupMember.Member = base.GetDataValue<int>(dr, "Member");
                        mailingGroupMember.Email = base.GetDataValue<string>(dr, "Email");
                        mailingGroupMember.Telno = base.GetDataValue<string>(dr, "Telno");
                        mailingGroupMember.MailingGroup = base.GetDataValue<string>(dr, "MailingGroup");

                        // Add to List.
                        result.Add(mailingGroupMember);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the MailingGroupMembers table.
        /// </summary>
        /// <param name="groupId">A groupId value.</param>
        /// <returns>A collection of MailingGroupMember objects.</returns>		
        public List<MailingGroupMember> SelectByGroupId(int groupId)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [GroupId], [IdType], [Member], [Email], [Telno], [MailingGroup] " +
                "FROM dbo.MailingGroupMembers " +
                "WHERE [GroupId]=@GroupId ";

            List<MailingGroupMember> result = new List<MailingGroupMember>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {

                db.AddInParameter(cmd, "@GroupId", DbType.Int32, groupId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new MailingGroupMember
                        MailingGroupMember mailingGroupMember = new MailingGroupMember();

                        // Read values.
                        mailingGroupMember.Id = base.GetDataValue<int>(dr, "Id");
                        mailingGroupMember.GroupId = base.GetDataValue<int>(dr, "GroupId");
                        mailingGroupMember.IdType = base.GetDataValue<string>(dr, "IdType");
                        mailingGroupMember.Member = base.GetDataValue<int>(dr, "Member");
                        mailingGroupMember.Email = base.GetDataValue<string>(dr, "Email");
                        mailingGroupMember.Telno = base.GetDataValue<string>(dr, "Telno");
                        mailingGroupMember.MailingGroup = base.GetDataValue<string>(dr, "MailingGroup");

                        // Add to List.
                        result.Add(mailingGroupMember);
                    }
                }
            }

            return result;
        }
    }
}

