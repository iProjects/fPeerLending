//====================================================================================================
// Code generated with Momentum: DAC Gen (Build 2.5.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by fmuraya at SOFTBOOKSSERVER on 08/16/2013 13:30:48 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fPeerLending.Entities;



namespace fPeerLending.Data
{
    /// <summary>
    /// Loans data access component. Manages CRUD operations for the Loans table.
    /// </summary>
    public partial class LoanDAC : DataAccessComponent
    {

        /// <summary>
        /// Inserts a new row in the Loans table.
        /// </summary>
        /// <param name="loan">A Loan object.</param>
        /// <returns>An updated Loan object.</returns>
        public Loan Create(Loan loan)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Loans ([MemberId], [OfferId], [Amount], [Interest], [Term], [CreatedDate], [MaturityDate], [PartialPay]) " +
                "VALUES(@MemberId, @OfferId, @Amount, @Interest, @Term, @CreatedDate, @MaturityDate, @PartialPay); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, loan.MemberId);
                db.AddInParameter(cmd, "@OfferId", DbType.Int32, loan.OfferId);
                db.AddInParameter(cmd, "@Amount", DbType.Currency, loan.Amount);
                db.AddInParameter(cmd, "@Interest", DbType.Double, loan.Interest);
                db.AddInParameter(cmd, "@Term", DbType.Int32, loan.Term);
                db.AddInParameter(cmd, "@CreatedDate", DbType.DateTime2, loan.CreatedDate);
                db.AddInParameter(cmd, "@MaturityDate", DbType.DateTime2, loan.MaturityDate);
                db.AddInParameter(cmd, "@PartialPay", DbType.Boolean, loan.PartialPay);

                // Get the primary key value.
                loan.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return loan;
        }

        /// <summary>
        /// Updates an existing row in the Loans table.
        /// </summary>
        /// <param name="loan">A Loan entity object.</param>
        public void UpdateById(Loan loan)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Loans " +
                "SET " +
                    "[MemberId]=@MemberId, " +
                    "[OfferId]=@OfferId, " +
                    "[Amount]=@Amount, " +
                    "[Interest]=@Interest, " +
                    "[Term]=@Term, " +
                    "[CreatedDate]=@CreatedDate, " +
                    "[MaturityDate]=@MaturityDate, " +
                    "[PartialPay]=@PartialPay " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, loan.MemberId);
                db.AddInParameter(cmd, "@OfferId", DbType.Int32, loan.OfferId);
                db.AddInParameter(cmd, "@Amount", DbType.Currency, loan.Amount);
                db.AddInParameter(cmd, "@Interest", DbType.Double, loan.Interest);
                db.AddInParameter(cmd, "@Term", DbType.Int32, loan.Term);
                db.AddInParameter(cmd, "@CreatedDate", DbType.DateTime2, loan.CreatedDate);
                db.AddInParameter(cmd, "@MaturityDate", DbType.DateTime2, loan.MaturityDate);
                db.AddInParameter(cmd, "@Id", DbType.Int32, loan.Id);
                db.AddInParameter(cmd, "@PartialPay", DbType.Boolean, loan.PartialPay);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Loans table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Loans " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.

                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Loans table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A Loan object with data populated from the database.</returns>
        public Loan SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT  * " +
                        " " +
                "FROM dbo.Loans  " +
                "WHERE [Id]=@Id ";

            Loan loan = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Loan
                        loan = LoadLoan(dr);
                    }
                }
            }

            return loan;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Loans table.
        /// </summary>
        /// <returns>A collection of Loan objects.</returns>		
        public List<Loan> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT * " +
                        " " +
                "FROM dbo.Loans ";

            List<Loan> result = new List<Loan>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Loan
                        Loan loan = LoadLoan(dr);

                        // Add to List.
                        result.Add(loan);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Creates a new Loan from a Datareader.
        /// </summary>
        /// <param name="dr">A DataReader object.</param>
        /// <returns>Returns a Loan.</returns>		
        private Loan LoadLoan(IDataReader dr)
        {
            // Create a new Loan
            Loan loan = new Loan();

            // Read values.
            loan.Id = base.GetDataValue<int>(dr, "Id");
            loan.MemberId = base.GetDataValue<int>(dr, "MemberId");
            loan.OfferId = base.GetDataValue<int>(dr, "OfferId");
            loan.Amount = base.GetDataValue<decimal>(dr, "Amount");
            loan.Interest = base.GetDataValue<double>(dr, "Interest");
            loan.Term = base.GetDataValue<int>(dr, "Term");
            loan.CreatedDate = base.GetDataValue<DateTime>(dr, "CreatedDate");
            loan.MaturityDate = base.GetDataValue<DateTime>(dr, "MaturityDate");
            loan.PartialPay = base.GetDataValue<bool>(dr, "PartialPay"); 

            return loan;
        }
    }
}
