//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/11/2014 08:21:26 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fPeerLending.Entities;

namespace fPeerLending.Data
{
    /// <summary>
    /// Contacts data access component. Manages CRUD operations for the Contacts table.
    /// </summary>
    public partial class ContactDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Contacts table.
        /// </summary>
        /// <param name="contact">A Contact object.</param>
        /// <returns>An updated Contact object.</returns>
        public Contact Create(Contact contact)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Contacts ([Surname], [OtherNames], [DateOfBirth], [Gender], [Telephone], [Email], [DateJoined], [Status], [DateActivated], [RefferedBy], [InformBy], [Photo], [NationalID], [Pwd]) " +
                "VALUES(@Surname, @OtherNames, @DateOfBirth, @Gender, @Telephone, @Email, @DateJoined, @Status, @DateActivated, @RefferedBy, @InformBy, @Photo, @NationalID, @Pwd); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Surname", DbType.String, contact.Surname);
                db.AddInParameter(cmd, "@OtherNames", DbType.String, contact.OtherNames);
                db.AddInParameter(cmd, "@DateOfBirth", DbType.DateTime2, contact.DateOfBirth);
                db.AddInParameter(cmd, "@Gender", DbType.String, contact.Gender);
                db.AddInParameter(cmd, "@Telephone", DbType.String, contact.Telephone);
                db.AddInParameter(cmd, "@Email", DbType.String, contact.Email);
                db.AddInParameter(cmd, "@DateJoined", DbType.DateTime2, contact.DateJoined);
                db.AddInParameter(cmd, "@Status", DbType.String, contact.Status);
                db.AddInParameter(cmd, "@DateActivated", DbType.DateTime2, contact.DateActivated);
                db.AddInParameter(cmd, "@RefferedBy", DbType.Int32, contact.RefferedBy);
                db.AddInParameter(cmd, "@InformBy", DbType.String, contact.InformBy);
                db.AddInParameter(cmd, "@Photo", DbType.String, contact.Photo);
                db.AddInParameter(cmd, "@NationalID", DbType.String, contact.NationalID);
                db.AddInParameter(cmd, "@Pwd", DbType.String, contact.Pwd);

                // Get the primary key value.
                contact.ContactId = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return contact;
        }

        /// <summary>
        /// Updates an existing row in the Contacts table.
        /// </summary>
        /// <param name="contact">A Contact entity object.</param>
        public void UpdateById(Contact contact)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Contacts " +
                "SET " +
                    "[Surname]=@Surname, " +
                    "[OtherNames]=@OtherNames, " +
                    "[DateOfBirth]=@DateOfBirth, " +
                    "[Gender]=@Gender, " +
                    "[Telephone]=@Telephone, " +
                    "[Email]=@Email, " +
                    "[DateJoined]=@DateJoined, " +
                    "[Status]=@Status, " +
                    "[DateActivated]=@DateActivated, " +
                    "[RefferedBy]=@RefferedBy, " +
                    "[InformBy]=@InformBy, " +
                    "[Photo]=@Photo, " +
                    "[NationalID]=@NationalID, " +
                    "[Pwd]=@Pwd " +
                "WHERE [ContactId]=@ContactId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Surname", DbType.String, contact.Surname);
                db.AddInParameter(cmd, "@OtherNames", DbType.String, contact.OtherNames);
                db.AddInParameter(cmd, "@DateOfBirth", DbType.DateTime2, contact.DateOfBirth);
                db.AddInParameter(cmd, "@Gender", DbType.String, contact.Gender);
                db.AddInParameter(cmd, "@Telephone", DbType.String, contact.Telephone);
                db.AddInParameter(cmd, "@Email", DbType.String, contact.Email);
                db.AddInParameter(cmd, "@DateJoined", DbType.DateTime2, contact.DateJoined);
                db.AddInParameter(cmd, "@Status", DbType.String, contact.Status);
                db.AddInParameter(cmd, "@DateActivated", DbType.DateTime2, contact.DateActivated);
                db.AddInParameter(cmd, "@RefferedBy", DbType.Int32, contact.RefferedBy);
                db.AddInParameter(cmd, "@InformBy", DbType.String, contact.InformBy);
                db.AddInParameter(cmd, "@Photo", DbType.String, contact.Photo);
                db.AddInParameter(cmd, "@NationalID", DbType.String, contact.NationalID);
                db.AddInParameter(cmd, "@Pwd", DbType.String, contact.Pwd);
                db.AddInParameter(cmd, "@ContactId", DbType.Int32, contact.ContactId);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Contacts table.
        /// </summary>
        /// <param name="contactId">A contactId value.</param>
        public void DeleteById(int contactId)
        {
            const string SQL_STATEMENT = "DELETE dbo.Contacts " +
                                         "WHERE [ContactId]=@ContactId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@ContactId", DbType.Int32, contactId);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Contacts table.
        /// </summary>
        /// <param name="contactId">A ContactId value.</param>
        /// <returns>A Contact object with data populated from the database.</returns>
        public Contact SelectById(int contactId)
        {
            const string SQL_STATEMENT =
                "SELECT [ContactId], [Surname], [OtherNames], [DateOfBirth], [Gender], [Telephone], [Email]" +
                        ", [DateJoined], [Status], [DateActivated], [RefferedBy], [InformBy], [Photo], [NationalID]" +
                        ", [Pwd] " +
                "FROM dbo.Contacts  " +
                "WHERE [ContactId]=@ContactId ";

            Contact contact = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@ContactId", DbType.Int32, contactId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Contact
                        contact = new Contact();

                        // Read values.
                        contact.ContactId = base.GetDataValue<int>(dr, "ContactId");
                        contact.Surname = base.GetDataValue<string>(dr, "Surname");
                        contact.OtherNames = base.GetDataValue<string>(dr, "OtherNames");
                        contact.DateOfBirth = base.GetDataValue<DateTime>(dr, "DateOfBirth");
                        contact.Gender = base.GetDataValue<string>(dr, "Gender");
                        contact.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        contact.Email = base.GetDataValue<string>(dr, "Email");
                        contact.DateJoined = base.GetDataValue<DateTime>(dr, "DateJoined");
                        contact.Status = base.GetDataValue<string>(dr, "Status");
                        contact.DateActivated = base.GetDataValue<DateTime>(dr, "DateActivated");
                        contact.RefferedBy = base.GetDataValue<int>(dr, "RefferedBy");
                        contact.InformBy = base.GetDataValue<string>(dr, "InformBy");
                        contact.Photo = base.GetDataValue<string>(dr, "Photo");
                        contact.NationalID = base.GetDataValue<string>(dr, "NationalID");
                        contact.Pwd = base.GetDataValue<string>(dr, "Pwd");
                    }
                }
            }

            return contact;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Contacts table.
        /// </summary>
        /// <returns>A collection of Contact objects.</returns>		
        public List<Contact> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [ContactId], [Surname], [OtherNames], [DateOfBirth], [Gender], [Telephone], [Email]" +
                        ", [DateJoined], [Status], [DateActivated], [RefferedBy], [InformBy], [Photo], [NationalID]" +
                        ", [Pwd] " +
                "FROM dbo.Contacts ";

            List<Contact> result = new List<Contact>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Contact
                        Contact contact = new Contact();

                        // Read values.
                        contact.ContactId = base.GetDataValue<int>(dr, "ContactId");
                        contact.Surname = base.GetDataValue<string>(dr, "Surname");
                        contact.OtherNames = base.GetDataValue<string>(dr, "OtherNames");
                        contact.DateOfBirth = base.GetDataValue<DateTime>(dr, "DateOfBirth");
                        contact.Gender = base.GetDataValue<string>(dr, "Gender");
                        contact.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        contact.Email = base.GetDataValue<string>(dr, "Email");
                        contact.DateJoined = base.GetDataValue<DateTime>(dr, "DateJoined");
                        contact.Status = base.GetDataValue<string>(dr, "Status");
                        contact.DateActivated = base.GetDataValue<DateTime>(dr, "DateActivated");
                        contact.RefferedBy = base.GetDataValue<int>(dr, "RefferedBy");
                        contact.InformBy = base.GetDataValue<string>(dr, "InformBy");
                        contact.Photo = base.GetDataValue<string>(dr, "Photo");
                        contact.NationalID = base.GetDataValue<string>(dr, "NationalID");
                        contact.Pwd = base.GetDataValue<string>(dr, "Pwd");

                        // Add to List.
                        result.Add(contact);
                    }
                }
            }

            return result;
        }
    }
}

