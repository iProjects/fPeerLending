//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 10/31/2014 18:46:02 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fPeerLending.Entities;

namespace fPeerLending.Data
{
    /// <summary>
    /// Members data access component. Manages CRUD operations for the Members table.
    /// </summary>
    public partial class MemberDAC : DataAccessComponent
    {
        /// <summary>
        /// Returns a count based on the condition.
        /// </summary>
        /// <param name="telephone">A telephone value.</param>
        /// <returns>An integer value.</returns>		
        public int CountByTelephone(string telephone)
        {
            const string SQL_STATEMENT =
                "SELECT COUNT(1) " +
                "FROM dbo.Members " +
                "WHERE [Telephone]=@Telephone ";

            int result = 0;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Telephone", DbType.String, telephone);

                result = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return result;
        }

        /// <summary>
        /// Returns a count based on the condition.
        /// </summary>
        /// <param name="email">A email value.</param>
        /// <returns>An integer value.</returns>		
        public int CountByEmail(string email)
        {
            const string SQL_STATEMENT =
                "SELECT COUNT(1) " +
                "FROM dbo.Members " +
                "WHERE [Email]=@Email ";

            int result = 0;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Email", DbType.String, email);

                result = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return result;
        }

        /// <summary>
        /// Returns a count based on the condition.
        /// </summary>
        /// <param name="nationalID">A nationalID value.</param>
        /// <returns>An integer value.</returns>		
        public int CountByNationalID(string nationalID)
        {
            const string SQL_STATEMENT =
                "SELECT COUNT(1) " +
                "FROM dbo.Members " +
                "WHERE [NationalID]=@NationalID ";

            int result = 0;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@NationalID", DbType.String, nationalID);

                result = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return result;
        }

        /// <summary>
        /// Returns a count based on the condition.
        /// </summary>
        /// <param name="telephone">A telephone value.</param>
        /// <param name="email">A email value.</param>
        /// <param name="nationalID">A nationalID value.</param>
        /// <returns>An integer value.</returns>		
        public int CountByTelephonePwd(string telephone,  string Pwd)
        {
            const string SQL_STATEMENT =
                "SELECT COUNT(1) " +
                "FROM dbo.Members " +
                "WHERE [Telephone]=@Telephone " +
                "AND [Pwd]=@Pwd ";

            int result = 0;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Telephone", DbType.String, telephone);
                db.AddInParameter(cmd, "@Pwd", DbType.String, Pwd);

                result = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return result;
        }


        /// <summary>
        /// Returns a count based on the condition.
        /// </summary>
        /// <param name="telephone">A telephone value.</param>
        /// <param name="email">A email value.</param>
        /// <param name="nationalID">A nationalID value.</param>
        /// <returns>An integer value.</returns>		
        public int CountByTelephoneEmailNationalID(string telephone, string email, string nationalID)
        {
            const string SQL_STATEMENT =
                "SELECT COUNT(1) " +
                "FROM dbo.Members " +
                "WHERE [Telephone]=@Telephone " +
                      "AND [Email]=@Email " +
                      "AND [NationalID]=@NationalID ";

            int result = 0;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Telephone", DbType.String, telephone);
                db.AddInParameter(cmd, "@Email", DbType.String, email);
                db.AddInParameter(cmd, "@NationalID", DbType.String, nationalID);

                result = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return result;
        }

        /// <summary>
        /// Inserts a new row in the Members table.
        /// </summary>
        /// <param name="member">A Member object.</param>
        /// <returns>An updated Member object.</returns>
        public Member Create(Member member)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Members ([Surname], [OtherNames], [DateOfBirth], [Gender], [Telephone], [Email], [DateJoined], [CustomerId], [CurrentAccountId], [LoanAccountId], [InvestmentAccountId], [Status], [DateActivated], [RefferedBy], [InformBy], [MaxRecordsToDisplay], [Photo], [NationalID], [Pwd]) " +
                "VALUES(@Surname, @OtherNames, @DateOfBirth, @Gender, @Telephone, @Email, @DateJoined, @CustomerId, @CurrentAccountId, @LoanAccountId, @InvestmentAccountId, @Status, @DateActivated, @RefferedBy, @InformBy, @MaxRecordsToDisplay, @Photo, @NationalID, @Pwd); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Surname", DbType.String, member.Surname);
                db.AddInParameter(cmd, "@OtherNames", DbType.String, member.OtherNames);
                db.AddInParameter(cmd, "@DateOfBirth", DbType.DateTime2, member.DateOfBirth);
                db.AddInParameter(cmd, "@Gender", DbType.String, member.Gender);
                db.AddInParameter(cmd, "@Telephone", DbType.String, member.Telephone);
                db.AddInParameter(cmd, "@Email", DbType.String, member.Email);
                db.AddInParameter(cmd, "@DateJoined", DbType.DateTime2, member.DateJoined);
                db.AddInParameter(cmd, "@CustomerId", DbType.Int32, member.CustomerId);
                db.AddInParameter(cmd, "@CurrentAccountId", DbType.Int32, member.CurrentAccountId);
                db.AddInParameter(cmd, "@LoanAccountId", DbType.Int32, member.LoanAccountId);
                db.AddInParameter(cmd, "@InvestmentAccountId", DbType.Int32, member.InvestmentAccountId);
                db.AddInParameter(cmd, "@Status", DbType.String, member.Status);
                db.AddInParameter(cmd, "@DateActivated", DbType.DateTime2, member.DateActivated);
                db.AddInParameter(cmd, "@RefferedBy", DbType.Int32, member.RefferedBy);
                db.AddInParameter(cmd, "@InformBy", DbType.String, member.InformBy);
                db.AddInParameter(cmd, "@MaxRecordsToDisplay", DbType.Int32, member.MaxRecordsToDisplay);
                db.AddInParameter(cmd, "@Photo", DbType.String, member.Photo);
                db.AddInParameter(cmd, "@NationalID", DbType.String, member.NationalID);
                db.AddInParameter(cmd, "@Pwd", DbType.String, member.Pwd);

                // Get the primary key value.
                member.MemberId = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return member;
        }

        /// <summary>
        /// Updates an existing row in the Members table.
        /// </summary>
        /// <param name="member">A Member entity object.</param>
        public void UpdateById(Member member)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Members " +
                "SET " +
                    "[Surname]=@Surname, " +
                    "[OtherNames]=@OtherNames, " +
                    "[DateOfBirth]=@DateOfBirth, " +
                    "[Gender]=@Gender, " +
                    "[Telephone]=@Telephone, " +
                    "[Email]=@Email, " +
                    "[DateJoined]=@DateJoined, " +
                    "[CustomerId]=@CustomerId, " +
                    "[CurrentAccountId]=@CurrentAccountId, " +
                    "[LoanAccountId]=@LoanAccountId, " +
                    "[InvestmentAccountId]=@InvestmentAccountId, " +
                    "[Status]=@Status, " +
                    "[DateActivated]=@DateActivated, " +
                    "[RefferedBy]=@RefferedBy, " +
                    "[InformBy]=@InformBy, " +
                    "[MaxRecordsToDisplay]=@MaxRecordsToDisplay, " +
                    "[Photo]=@Photo, " +
                    "[NationalID]=@NationalID, " +
                    "[Pwd]=@Pwd " +
                "WHERE [MemberId]=@MemberId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Surname", DbType.String, member.Surname);
                db.AddInParameter(cmd, "@OtherNames", DbType.String, member.OtherNames);
                db.AddInParameter(cmd, "@DateOfBirth", DbType.DateTime2, member.DateOfBirth);
                db.AddInParameter(cmd, "@Gender", DbType.String, member.Gender);
                db.AddInParameter(cmd, "@Telephone", DbType.String, member.Telephone);
                db.AddInParameter(cmd, "@Email", DbType.String, member.Email);
                db.AddInParameter(cmd, "@DateJoined", DbType.DateTime2, member.DateJoined);
                db.AddInParameter(cmd, "@CustomerId", DbType.Int32, member.CustomerId);
                db.AddInParameter(cmd, "@CurrentAccountId", DbType.Int32, member.CurrentAccountId);
                db.AddInParameter(cmd, "@LoanAccountId", DbType.Int32, member.LoanAccountId);
                db.AddInParameter(cmd, "@InvestmentAccountId", DbType.Int32, member.InvestmentAccountId);
                db.AddInParameter(cmd, "@Status", DbType.String, member.Status);
                db.AddInParameter(cmd, "@DateActivated", DbType.DateTime2, member.DateActivated);
                db.AddInParameter(cmd, "@RefferedBy", DbType.Int32, member.RefferedBy);
                db.AddInParameter(cmd, "@InformBy", DbType.String, member.InformBy);
                db.AddInParameter(cmd, "@MaxRecordsToDisplay", DbType.Int32, member.MaxRecordsToDisplay);
                db.AddInParameter(cmd, "@Photo", DbType.String, member.Photo);
                db.AddInParameter(cmd, "@NationalID", DbType.String, member.NationalID);
                db.AddInParameter(cmd, "@Pwd", DbType.String, member.Pwd);
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, member.MemberId);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Members table.
        /// </summary>
        /// <param name="memberId">A memberId value.</param>
        public void DeleteById(int memberId)
        {
            const string SQL_STATEMENT = "DELETE dbo.Members " +
                                         "WHERE [MemberId]=@MemberId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, memberId);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Members table.
        /// </summary>
        /// <param name="memberId">A MemberId value.</param>
        /// <returns>A Member object with data populated from the database.</returns>
        public Member SelectById(int memberId)
        {
            const string SQL_STATEMENT =
                "SELECT [MemberId], [Surname], [OtherNames], [DateOfBirth], [Gender], [Telephone], [Email]" +
                        ", [DateJoined], [CustomerId], [CurrentAccountId], [LoanAccountId], [InvestmentAccountId]" +
                        ", [Status], [DateActivated], [RefferedBy], [InformBy], [MaxRecordsToDisplay], [Photo]" +
                        ", [NationalID], [Pwd] " +
                "FROM dbo.Members  " +
                "WHERE [MemberId]=@MemberId ";

            Member member = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, memberId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Member
                        member = new Member();

                        // Read values.
                        member.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        member.Surname = base.GetDataValue<string>(dr, "Surname");
                        member.OtherNames = base.GetDataValue<string>(dr, "OtherNames");
                        member.DateOfBirth = base.GetDataValue<DateTime>(dr, "DateOfBirth");
                        member.Gender = base.GetDataValue<string>(dr, "Gender");
                        member.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        member.Email = base.GetDataValue<string>(dr, "Email");
                        member.DateJoined = base.GetDataValue<DateTime>(dr, "DateJoined");
                        member.CustomerId = base.GetDataValue<int>(dr, "CustomerId");
                        member.CurrentAccountId = base.GetDataValue<int>(dr, "CurrentAccountId");
                        member.LoanAccountId = base.GetDataValue<int>(dr, "LoanAccountId");
                        member.InvestmentAccountId = base.GetDataValue<int>(dr, "InvestmentAccountId");
                        member.Status = base.GetDataValue<string>(dr, "Status");
                        member.DateActivated = base.GetDataValue<DateTime>(dr, "DateActivated");
                        member.RefferedBy = base.GetDataValue<int>(dr, "RefferedBy");
                        member.InformBy = base.GetDataValue<string>(dr, "InformBy");
                        member.MaxRecordsToDisplay = base.GetDataValue<int>(dr, "MaxRecordsToDisplay");
                        member.Photo = base.GetDataValue<string>(dr, "Photo");
                        member.NationalID = base.GetDataValue<string>(dr, "NationalID");
                        member.Pwd = base.GetDataValue<string>(dr, "Pwd");
                    }
                }
            }

            return member;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Members table.
        /// </summary>
        /// <returns>A collection of Member objects.</returns>		
        public List<Member> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [MemberId], [Surname], [OtherNames], [DateOfBirth], [Gender], [Telephone], [Email]" +
                        ", [DateJoined], [CustomerId], [CurrentAccountId], [LoanAccountId], [InvestmentAccountId]" +
                        ", [Status], [DateActivated], [RefferedBy], [InformBy], [MaxRecordsToDisplay], [Photo]" +
                        ", [NationalID], [Pwd] " +
                "FROM dbo.Members ";

            List<Member> result = new List<Member>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Member
                        Member member = new Member();

                        // Read values.
                        member.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        member.Surname = base.GetDataValue<string>(dr, "Surname");
                        member.OtherNames = base.GetDataValue<string>(dr, "OtherNames");
                        member.DateOfBirth = base.GetDataValue<DateTime>(dr, "DateOfBirth");
                        member.Gender = base.GetDataValue<string>(dr, "Gender");
                        member.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        member.Email = base.GetDataValue<string>(dr, "Email");
                        member.DateJoined = base.GetDataValue<DateTime>(dr, "DateJoined");
                        member.CustomerId = base.GetDataValue<int>(dr, "CustomerId");
                        member.CurrentAccountId = base.GetDataValue<int>(dr, "CurrentAccountId");
                        member.LoanAccountId = base.GetDataValue<int>(dr, "LoanAccountId");
                        member.InvestmentAccountId = base.GetDataValue<int>(dr, "InvestmentAccountId");
                        member.Status = base.GetDataValue<string>(dr, "Status");
                        member.DateActivated = base.GetDataValue<DateTime>(dr, "DateActivated");
                        member.RefferedBy = base.GetDataValue<int>(dr, "RefferedBy");
                        member.InformBy = base.GetDataValue<string>(dr, "InformBy");
                        member.MaxRecordsToDisplay = base.GetDataValue<int>(dr, "MaxRecordsToDisplay");
                        member.Photo = base.GetDataValue<string>(dr, "Photo");
                        member.NationalID = base.GetDataValue<string>(dr, "NationalID");
                        member.Pwd = base.GetDataValue<string>(dr, "Pwd");

                        // Add to List.
                        result.Add(member);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Returns a row from the Members table.
        /// </summary>
        /// <param name="telephone">A Telephone value.</param>
        /// <returns>A Member object with data populated from the database.</returns>
        public Member SelectByTelephone(string telephone)
        {
            const string SQL_STATEMENT =
                "SELECT [MemberId], [Surname], [OtherNames], [DateOfBirth], [Gender], [Telephone], [Email]" +
                        ", [DateJoined], [CustomerId], [CurrentAccountId], [LoanAccountId], [InvestmentAccountId]" +
                        ", [Status], [DateActivated], [RefferedBy], [InformBy], [MaxRecordsToDisplay], [Photo]" +
                        ", [NationalID], [Pwd] " +
                "FROM dbo.Members  " +
                "WHERE [Telephone]=@Telephone ";

            Member member = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Telephone", DbType.String, telephone);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Member
                        member = new Member();

                        // Read values.
                        member.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        member.Surname = base.GetDataValue<string>(dr, "Surname");
                        member.OtherNames = base.GetDataValue<string>(dr, "OtherNames");
                        member.DateOfBirth = base.GetDataValue<DateTime>(dr, "DateOfBirth");
                        member.Gender = base.GetDataValue<string>(dr, "Gender");
                        member.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        member.Email = base.GetDataValue<string>(dr, "Email");
                        member.DateJoined = base.GetDataValue<DateTime>(dr, "DateJoined");
                        member.CustomerId = base.GetDataValue<int>(dr, "CustomerId");
                        member.CurrentAccountId = base.GetDataValue<int>(dr, "CurrentAccountId");
                        member.LoanAccountId = base.GetDataValue<int>(dr, "LoanAccountId");
                        member.InvestmentAccountId = base.GetDataValue<int>(dr, "InvestmentAccountId");
                        member.Status = base.GetDataValue<string>(dr, "Status");
                        member.DateActivated = base.GetDataValue<DateTime>(dr, "DateActivated");
                        member.RefferedBy = base.GetDataValue<int>(dr, "RefferedBy");
                        member.InformBy = base.GetDataValue<string>(dr, "InformBy");
                        member.MaxRecordsToDisplay = base.GetDataValue<int>(dr, "MaxRecordsToDisplay");
                        member.Photo = base.GetDataValue<string>(dr, "Photo");
                        member.NationalID = base.GetDataValue<string>(dr, "NationalID");
                        member.Pwd = base.GetDataValue<string>(dr, "Pwd");
                    }
                }
            }

            return member;
        }

        /// <summary>
        /// Returns a row from the Members table.
        /// </summary>
        /// <param name="email">A Email value.</param>
        /// <returns>A Member object with data populated from the database.</returns>
        public Member SelectByEmail(string email)
        {
            const string SQL_STATEMENT =
                "SELECT [MemberId], [Surname], [OtherNames], [DateOfBirth], [Gender], [Telephone], [Email]" +
                        ", [DateJoined], [CustomerId], [CurrentAccountId], [LoanAccountId], [InvestmentAccountId]" +
                        ", [Status], [DateActivated], [RefferedBy], [InformBy], [MaxRecordsToDisplay], [Photo]" +
                        ", [NationalID], [Pwd] " +
                "FROM dbo.Members  " +
                "WHERE [Email]=@Email ";

            Member member = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Email", DbType.String, email);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Member
                        member = new Member();

                        // Read values.
                        member.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        member.Surname = base.GetDataValue<string>(dr, "Surname");
                        member.OtherNames = base.GetDataValue<string>(dr, "OtherNames");
                        member.DateOfBirth = base.GetDataValue<DateTime>(dr, "DateOfBirth");
                        member.Gender = base.GetDataValue<string>(dr, "Gender");
                        member.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        member.Email = base.GetDataValue<string>(dr, "Email");
                        member.DateJoined = base.GetDataValue<DateTime>(dr, "DateJoined");
                        member.CustomerId = base.GetDataValue<int>(dr, "CustomerId");
                        member.CurrentAccountId = base.GetDataValue<int>(dr, "CurrentAccountId");
                        member.LoanAccountId = base.GetDataValue<int>(dr, "LoanAccountId");
                        member.InvestmentAccountId = base.GetDataValue<int>(dr, "InvestmentAccountId");
                        member.Status = base.GetDataValue<string>(dr, "Status");
                        member.DateActivated = base.GetDataValue<DateTime>(dr, "DateActivated");
                        member.RefferedBy = base.GetDataValue<int>(dr, "RefferedBy");
                        member.InformBy = base.GetDataValue<string>(dr, "InformBy");
                        member.MaxRecordsToDisplay = base.GetDataValue<int>(dr, "MaxRecordsToDisplay");
                        member.Photo = base.GetDataValue<string>(dr, "Photo");
                        member.NationalID = base.GetDataValue<string>(dr, "NationalID");
                        member.Pwd = base.GetDataValue<string>(dr, "Pwd");
                    }
                }
            }

            return member;
        }

        /// <summary>
        /// Returns a row from the Members table.
        /// </summary>
        /// <param name="nationalID">A NationalID value.</param>
        /// <returns>A Member object with data populated from the database.</returns>
        public Member SelectByNationalID(string nationalID)
        {
            const string SQL_STATEMENT =
                "SELECT [MemberId], [Surname], [OtherNames], [DateOfBirth], [Gender], [Telephone], [Email]" +
                        ", [DateJoined], [CustomerId], [CurrentAccountId], [LoanAccountId], [InvestmentAccountId]" +
                        ", [Status], [DateActivated], [RefferedBy], [InformBy], [MaxRecordsToDisplay], [Photo]" +
                        ", [NationalID], [Pwd] " +
                "FROM dbo.Members  " +
                "WHERE [NationalID]=@NationalID ";

            Member member = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@NationalID", DbType.String, nationalID);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Member
                        member = new Member();

                        // Read values.
                        member.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        member.Surname = base.GetDataValue<string>(dr, "Surname");
                        member.OtherNames = base.GetDataValue<string>(dr, "OtherNames");
                        member.DateOfBirth = base.GetDataValue<DateTime>(dr, "DateOfBirth");
                        member.Gender = base.GetDataValue<string>(dr, "Gender");
                        member.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        member.Email = base.GetDataValue<string>(dr, "Email");
                        member.DateJoined = base.GetDataValue<DateTime>(dr, "DateJoined");
                        member.CustomerId = base.GetDataValue<int>(dr, "CustomerId");
                        member.CurrentAccountId = base.GetDataValue<int>(dr, "CurrentAccountId");
                        member.LoanAccountId = base.GetDataValue<int>(dr, "LoanAccountId");
                        member.InvestmentAccountId = base.GetDataValue<int>(dr, "InvestmentAccountId");
                        member.Status = base.GetDataValue<string>(dr, "Status");
                        member.DateActivated = base.GetDataValue<DateTime>(dr, "DateActivated");
                        member.RefferedBy = base.GetDataValue<int>(dr, "RefferedBy");
                        member.InformBy = base.GetDataValue<string>(dr, "InformBy");
                        member.MaxRecordsToDisplay = base.GetDataValue<int>(dr, "MaxRecordsToDisplay");
                        member.Photo = base.GetDataValue<string>(dr, "Photo");
                        member.NationalID = base.GetDataValue<string>(dr, "NationalID");
                        member.Pwd = base.GetDataValue<string>(dr, "Pwd");
                    }
                }
            }

            return member;
        }
    }
}

