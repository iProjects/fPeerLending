//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by francis.muraya at KPC0201M on 11/27/2014 09:07:18 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fPeerLending.Entities;

namespace fPeerLending.Data
{
    /// <summary>
    /// OfferReceipients data access component. Manages CRUD operations for the OfferReceipients table.
    /// </summary>
    public partial class OfferReceipientDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the OfferReceipients table.
        /// </summary>
        /// <param name="offerReceipient">A OfferReceipient object.</param>
        /// <returns>An updated OfferReceipient object.</returns>
        public OfferReceipient Create(OfferReceipient offerReceipient)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.OfferReceipients ([OfferId], [IdType], [MemberId], [MemberEmail], [MemberTelno], [MailingGroup]) " +
                "VALUES(@OfferId, @IdType, @MemberId, @MemberEmail, @MemberTelno, @MailingGroup); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@OfferId", DbType.Int32, offerReceipient.OfferId);
                db.AddInParameter(cmd, "@IdType", DbType.AnsiString, offerReceipient.IdType);
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, offerReceipient.MemberId);
                db.AddInParameter(cmd, "@MemberEmail", DbType.AnsiString, offerReceipient.MemberEmail);
                db.AddInParameter(cmd, "@MemberTelno", DbType.AnsiString, offerReceipient.MemberTelno);
                db.AddInParameter(cmd, "@MailingGroup", DbType.AnsiString, offerReceipient.MailingGroup);

                // Get the primary key value.
                offerReceipient.OfferReceipientId = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return offerReceipient;
        }

        /// <summary>
        /// Updates an existing row in the OfferReceipients table.
        /// </summary>
        /// <param name="offerReceipient">A OfferReceipient entity object.</param>
        public void UpdateById(OfferReceipient offerReceipient)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.OfferReceipients " +
                "SET " +
                    "[OfferId]=@OfferId, " +
                    "[IdType]=@IdType, " +
                    "[MemberId]=@MemberId, " +
                    "[MemberEmail]=@MemberEmail, " +
                    "[MemberTelno]=@MemberTelno, " +
                    "[MailingGroup]=@MailingGroup " +
                "WHERE [OfferReceipientId]=@OfferReceipientId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@OfferId", DbType.Int32, offerReceipient.OfferId);
                db.AddInParameter(cmd, "@IdType", DbType.AnsiString, offerReceipient.IdType);
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, offerReceipient.MemberId);
                db.AddInParameter(cmd, "@MemberEmail", DbType.AnsiString, offerReceipient.MemberEmail);
                db.AddInParameter(cmd, "@MemberTelno", DbType.AnsiString, offerReceipient.MemberTelno);
                db.AddInParameter(cmd, "@MailingGroup", DbType.AnsiString, offerReceipient.MailingGroup);
                db.AddInParameter(cmd, "@OfferReceipientId", DbType.Int32, offerReceipient.OfferReceipientId);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the OfferReceipients table.
        /// </summary>
        /// <param name="offerReceipientId">A offerReceipientId value.</param>
        public void DeleteById(int offerReceipientId)
        {
            const string SQL_STATEMENT = "DELETE dbo.OfferReceipients " +
                                         "WHERE [OfferReceipientId]=@OfferReceipientId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@OfferReceipientId", DbType.Int32, offerReceipientId);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the OfferReceipients table.
        /// </summary>
        /// <param name="offerReceipientId">A OfferReceipientId value.</param>
        /// <returns>A OfferReceipient object with data populated from the database.</returns>
        public OfferReceipient SelectById(int offerReceipientId)
        {
            const string SQL_STATEMENT =
                "SELECT [OfferReceipientId], [OfferId], [IdType], [MemberId], [MemberEmail], [MemberTelno]" +
                        ", [MailingGroup] " +
                "FROM dbo.OfferReceipients  " +
                "WHERE [OfferReceipientId]=@OfferReceipientId ";

            OfferReceipient offerReceipient = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@OfferReceipientId", DbType.Int32, offerReceipientId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new OfferReceipient
                        offerReceipient = new OfferReceipient();

                        // Read values.
                        offerReceipient.OfferReceipientId = base.GetDataValue<int>(dr, "OfferReceipientId");
                        offerReceipient.OfferId = base.GetDataValue<int>(dr, "OfferId");
                        offerReceipient.IdType = base.GetDataValue<string>(dr, "IdType");
                        offerReceipient.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        offerReceipient.MemberEmail = base.GetDataValue<string>(dr, "MemberEmail");
                        offerReceipient.MemberTelno = base.GetDataValue<string>(dr, "MemberTelno");
                        offerReceipient.MailingGroup = base.GetDataValue<string>(dr, "MailingGroup");
                    }
                }
            }

            return offerReceipient;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the OfferReceipients table.
        /// </summary>
        /// <returns>A collection of OfferReceipient objects.</returns>		
        public List<OfferReceipient> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [OfferReceipientId], [OfferId], [IdType], [MemberId], [MemberEmail], [MemberTelno]" +
                        ", [MailingGroup] " +
                "FROM dbo.OfferReceipients ";

            List<OfferReceipient> result = new List<OfferReceipient>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new OfferReceipient
                        OfferReceipient offerReceipient = new OfferReceipient();

                        // Read values.
                        offerReceipient.OfferReceipientId = base.GetDataValue<int>(dr, "OfferReceipientId");
                        offerReceipient.OfferId = base.GetDataValue<int>(dr, "OfferId");
                        offerReceipient.IdType = base.GetDataValue<string>(dr, "IdType");
                        offerReceipient.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        offerReceipient.MemberEmail = base.GetDataValue<string>(dr, "MemberEmail");
                        offerReceipient.MemberTelno = base.GetDataValue<string>(dr, "MemberTelno");
                        offerReceipient.MailingGroup = base.GetDataValue<string>(dr, "MailingGroup");

                        // Add to List.
                        result.Add(offerReceipient);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the OfferReceipients table.
        /// </summary>
        /// <param name="offerId">A offerId value.</param>
        /// <returns>A collection of OfferReceipient objects.</returns>		
        public List<OfferReceipient> SelectByOfferId(int offerId)
        {
            const string SQL_STATEMENT =
                "SELECT [OfferReceipientId], [OfferId], [IdType], [MemberId], [MemberEmail], [MemberTelno]" +
                        ", [MailingGroup] " +
                "FROM dbo.OfferReceipients " +
                "WHERE [OfferId]=@OfferId ";

            List<OfferReceipient> result = new List<OfferReceipient>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {

                db.AddInParameter(cmd, "@OfferId", DbType.Int32, offerId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new OfferReceipient
                        OfferReceipient offerReceipient = new OfferReceipient();

                        // Read values.
                        offerReceipient.OfferReceipientId = base.GetDataValue<int>(dr, "OfferReceipientId");
                        offerReceipient.OfferId = base.GetDataValue<int>(dr, "OfferId");
                        offerReceipient.IdType = base.GetDataValue<string>(dr, "IdType");
                        offerReceipient.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        offerReceipient.MemberEmail = base.GetDataValue<string>(dr, "MemberEmail");
                        offerReceipient.MemberTelno = base.GetDataValue<string>(dr, "MemberTelno");
                        offerReceipient.MailingGroup = base.GetDataValue<string>(dr, "MailingGroup");

                        // Add to List.
                        result.Add(offerReceipient);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the OfferReceipients table.
        /// </summary>
        /// <param name="idType">A idType value.</param>
        /// <returns>A collection of OfferReceipient objects.</returns>		
        public List<OfferReceipient> SelectByIdType(string idType)
        {
            const string SQL_STATEMENT =
                "SELECT [OfferReceipientId], [OfferId], [IdType], [MemberId], [MemberEmail], [MemberTelno]" +
                        ", [MailingGroup] " +
                "FROM dbo.OfferReceipients " +
                "WHERE [IdType]=@IdType ";

            List<OfferReceipient> result = new List<OfferReceipient>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {

                db.AddInParameter(cmd, "@IdType", DbType.AnsiString, idType);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new OfferReceipient
                        OfferReceipient offerReceipient = new OfferReceipient();

                        // Read values.
                        offerReceipient.OfferReceipientId = base.GetDataValue<int>(dr, "OfferReceipientId");
                        offerReceipient.OfferId = base.GetDataValue<int>(dr, "OfferId");
                        offerReceipient.IdType = base.GetDataValue<string>(dr, "IdType");
                        offerReceipient.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        offerReceipient.MemberEmail = base.GetDataValue<string>(dr, "MemberEmail");
                        offerReceipient.MemberTelno = base.GetDataValue<string>(dr, "MemberTelno");
                        offerReceipient.MailingGroup = base.GetDataValue<string>(dr, "MailingGroup");

                        // Add to List.
                        result.Add(offerReceipient);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the OfferReceipients table.
        /// </summary>
        /// <param name="memberId">A memberId value.</param>
        /// <returns>A collection of OfferReceipient objects.</returns>		
        public List<OfferReceipient> SelectByMemberId(int memberId)
        {
            const string SQL_STATEMENT =
                "SELECT [OfferReceipientId], [OfferId], [IdType], [MemberId], [MemberEmail], [MemberTelno]" +
                        ", [MailingGroup] " +
                "FROM dbo.OfferReceipients " +
                "WHERE [MemberId]=@MemberId ";

            List<OfferReceipient> result = new List<OfferReceipient>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {

                db.AddInParameter(cmd, "@MemberId", DbType.Int32, memberId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new OfferReceipient
                        OfferReceipient offerReceipient = new OfferReceipient();

                        // Read values.
                        offerReceipient.OfferReceipientId = base.GetDataValue<int>(dr, "OfferReceipientId");
                        offerReceipient.OfferId = base.GetDataValue<int>(dr, "OfferId");
                        offerReceipient.IdType = base.GetDataValue<string>(dr, "IdType");
                        offerReceipient.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        offerReceipient.MemberEmail = base.GetDataValue<string>(dr, "MemberEmail");
                        offerReceipient.MemberTelno = base.GetDataValue<string>(dr, "MemberTelno");
                        offerReceipient.MailingGroup = base.GetDataValue<string>(dr, "MailingGroup");

                        // Add to List.
                        result.Add(offerReceipient);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the OfferReceipients table.
        /// </summary>
        /// <param name="memberEmail">A memberEmail value.</param>
        /// <returns>A collection of OfferReceipient objects.</returns>		
        public List<OfferReceipient> SelectByMemberEmail(string memberEmail)
        {
            const string SQL_STATEMENT =
                "SELECT [OfferReceipientId], [OfferId], [IdType], [MemberId], [MemberEmail], [MemberTelno]" +
                        ", [MailingGroup] " +
                "FROM dbo.OfferReceipients " +
                "WHERE [MemberEmail]=@MemberEmail ";

            List<OfferReceipient> result = new List<OfferReceipient>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {

                db.AddInParameter(cmd, "@MemberEmail", DbType.AnsiString, memberEmail);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new OfferReceipient
                        OfferReceipient offerReceipient = new OfferReceipient();

                        // Read values.
                        offerReceipient.OfferReceipientId = base.GetDataValue<int>(dr, "OfferReceipientId");
                        offerReceipient.OfferId = base.GetDataValue<int>(dr, "OfferId");
                        offerReceipient.IdType = base.GetDataValue<string>(dr, "IdType");
                        offerReceipient.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        offerReceipient.MemberEmail = base.GetDataValue<string>(dr, "MemberEmail");
                        offerReceipient.MemberTelno = base.GetDataValue<string>(dr, "MemberTelno");
                        offerReceipient.MailingGroup = base.GetDataValue<string>(dr, "MailingGroup");

                        // Add to List.
                        result.Add(offerReceipient);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the OfferReceipients table.
        /// </summary>
        /// <param name="memberTelno">A memberTelno value.</param>
        /// <returns>A collection of OfferReceipient objects.</returns>		
        public List<OfferReceipient> SelectByMemberTelno(string memberTelno)
        {
            const string SQL_STATEMENT =
                "SELECT [OfferReceipientId], [OfferId], [IdType], [MemberId], [MemberEmail], [MemberTelno]" +
                        ", [MailingGroup] " +
                "FROM dbo.OfferReceipients " +
                "WHERE [MemberTelno]=@MemberTelno ";

            List<OfferReceipient> result = new List<OfferReceipient>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {

                db.AddInParameter(cmd, "@MemberTelno", DbType.AnsiString, memberTelno);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new OfferReceipient
                        OfferReceipient offerReceipient = new OfferReceipient();

                        // Read values.
                        offerReceipient.OfferReceipientId = base.GetDataValue<int>(dr, "OfferReceipientId");
                        offerReceipient.OfferId = base.GetDataValue<int>(dr, "OfferId");
                        offerReceipient.IdType = base.GetDataValue<string>(dr, "IdType");
                        offerReceipient.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        offerReceipient.MemberEmail = base.GetDataValue<string>(dr, "MemberEmail");
                        offerReceipient.MemberTelno = base.GetDataValue<string>(dr, "MemberTelno");
                        offerReceipient.MailingGroup = base.GetDataValue<string>(dr, "MailingGroup");

                        // Add to List.
                        result.Add(offerReceipient);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the OfferReceipients table.
        /// </summary>
        /// <param name="mailingGroup">A mailingGroup value.</param>
        /// <returns>A collection of OfferReceipient objects.</returns>		
        public List<OfferReceipient> SelectByMailingGroup(string mailingGroup)
        {
            const string SQL_STATEMENT =
                "SELECT [OfferReceipientId], [OfferId], [IdType], [MemberId], [MemberEmail], [MemberTelno]" +
                        ", [MailingGroup] " +
                "FROM dbo.OfferReceipients " +
                "WHERE [MailingGroup]=@MailingGroup ";

            List<OfferReceipient> result = new List<OfferReceipient>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {

                db.AddInParameter(cmd, "@MailingGroup", DbType.AnsiString, mailingGroup);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new OfferReceipient
                        OfferReceipient offerReceipient = new OfferReceipient();

                        // Read values.
                        offerReceipient.OfferReceipientId = base.GetDataValue<int>(dr, "OfferReceipientId");
                        offerReceipient.OfferId = base.GetDataValue<int>(dr, "OfferId");
                        offerReceipient.IdType = base.GetDataValue<string>(dr, "IdType");
                        offerReceipient.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        offerReceipient.MemberEmail = base.GetDataValue<string>(dr, "MemberEmail");
                        offerReceipient.MemberTelno = base.GetDataValue<string>(dr, "MemberTelno");
                        offerReceipient.MailingGroup = base.GetDataValue<string>(dr, "MailingGroup");

                        // Add to List.
                        result.Add(offerReceipient);
                    }
                }
            }

            return result;
        }
    }
}

