//====================================================================================================
// Code generated with Momentum: DAC Gen (Build 2.5.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by fmuraya at SOFTBOOKSSERVER on 08/29/2013 14:55:35 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fPeerLending.Entities;



namespace fPeerLending.Data
{
    /// <summary>
    /// Offers data access component. Manages CRUD operations for the Offers table.
    /// </summary>
    public partial class OfferDAC : DataAccessComponent
    {
        #region"Offers"
        /// <summary>
        /// Inserts a new row in the Offers table.
        /// </summary>
        /// <param name="offer">A Offer object.</param>
        /// <returns>An updated Offer object.</returns>
        public Offer Create(Offer offer)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Offers ([OfferType], [MemberId], [Description], [Offerees], [ExpiryDate], [CreatedDate], [Amount], [Term], [Interest], [Status], [PublicOffer], [PartialPay]) " +
                "VALUES(@OfferType, @MemberId, @Description, @Offerees, @ExpiryDate, @CreatedDate, @Amount, @Term, @Interest, @Status, @PublicOffer, @PartialPay); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@OfferType", DbType.String, offer.OfferType);
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, offer.MemberId);
                db.AddInParameter(cmd, "@Description", DbType.AnsiString, offer.Description);
                db.AddInParameter(cmd, "@Offerees", DbType.AnsiString, offer.Offerees);
                db.AddInParameter(cmd, "@ExpiryDate", DbType.DateTime2, offer.ExpiryDate);
                db.AddInParameter(cmd, "@CreatedDate", DbType.DateTime2, offer.CreatedDate);
                db.AddInParameter(cmd, "@Amount", DbType.Currency, offer.Amount);
                db.AddInParameter(cmd, "@Term", DbType.Int32, offer.Term);
                db.AddInParameter(cmd, "@Interest", DbType.Double, offer.Interest);
                db.AddInParameter(cmd, "@Status", DbType.String, offer.Status);
                db.AddInParameter(cmd, "@PublicOffer", DbType.String, offer.PublicOffer);
                db.AddInParameter(cmd, "@PartialPay", DbType.Boolean, offer.PartialPay);

                // Get the primary key value.
                offer.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return offer;
        }
        /// <summary>
        /// Updates an existing row in the Offers table.
        /// </summary>
        /// <param name="offer">A Offer entity object.</param>
        public void UpdateById(Offer offer)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Offers " +
                "SET " +
                    "[OfferType]=@OfferType, " +
                    "[MemberId]=@MemberId, " +
                    "[Description]=@Description, " +
                    "[Offerees]=@Offerees, " +
                    "[ExpiryDate]=@ExpiryDate, " +
                    "[CreatedDate]=@CreatedDate, " +
                    "[Amount]=@Amount, " +
                    "[Term]=@Term, " +
                    "[Interest]=@Interest, " +
                    "[Status]=@Status, " +
                     "[PublicOffer]=@PublicOffer, " +
                     "[PartialPay]=@PartialPay " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@OfferType", DbType.String, offer.OfferType);
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, offer.MemberId);
                db.AddInParameter(cmd, "@Description", DbType.AnsiString, offer.Description);
                db.AddInParameter(cmd, "@Offerees", DbType.AnsiString, offer.Offerees);
                db.AddInParameter(cmd, "@ExpiryDate", DbType.DateTime2, offer.ExpiryDate);
                db.AddInParameter(cmd, "@CreatedDate", DbType.DateTime2, offer.CreatedDate);
                db.AddInParameter(cmd, "@Amount", DbType.Currency, offer.Amount);
                db.AddInParameter(cmd, "@Term", DbType.Int32, offer.Term);
                db.AddInParameter(cmd, "@Interest", DbType.Double, offer.Interest);
                db.AddInParameter(cmd, "@Status", DbType.String, offer.Status);
                db.AddInParameter(cmd, "@PublicOffer", DbType.String, offer.PublicOffer);
                db.AddInParameter(cmd, "@PartialPay", DbType.Boolean, offer.PartialPay);
                db.AddInParameter(cmd, "@Id", DbType.Int32, offer.Id);

                db.ExecuteNonQuery(cmd);
            }
        }
        /// <summary>
        /// Conditionally deletes one or more rows in the Offers table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Offers " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.

                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }
        /// <summary>
        /// Returns a row from the Offers table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A Offer object with data populated from the database.</returns>
        public Offer SelectById(int id)
        {
            const string SQL_STATEMENT =
                " SELECT * FROM dbo.Offers  " +
                " WHERE [Id]=@Id ";

            Offer offer = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Offer
                        offer = new Offer();

                        // Read values.
                        offer.Id = base.GetDataValue<int>(dr, "Id");
                        offer.OfferType = base.GetDataValue<string>(dr, "OfferType");
                        offer.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        offer.Description = base.GetDataValue<string>(dr, "Description");
                        offer.Offerees = base.GetDataValue<string>(dr, "Offerees");
                        offer.ExpiryDate = base.GetDataValue<DateTime>(dr, "ExpiryDate");
                        offer.CreatedDate = base.GetDataValue<DateTime>(dr, "CreatedDate");
                        offer.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        offer.Term = base.GetDataValue<int>(dr, "Term");
                        offer.Interest = base.GetDataValue<double>(dr, "Interest");
                        offer.Status = base.GetDataValue<string>(dr, "Status");
                        offer.PublicOffer = base.GetDataValue<string>(dr, "PublicOffer");
                        offer.PartialPay = base.GetDataValue<bool>(dr, "PartialPay");
                    }
                }
            }

            return offer;
        }
        /// <summary>
        /// Conditionally retrieves one or more rows from the Offers table.
        /// </summary>
        /// <returns>A collection of Offer objects.</returns>		
        public List<Offer> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                " SELECT * FROM dbo.Offers offer " +
                " WHERE offer.ExpiryDate > @datetoday " +
                " ORDER BY offer.CreatedDate DESC ";

            List<Offer> result = new List<Offer>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@datetoday", DbType.Date, DateTime.Now.Date);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Offer
                        Offer offer = new Offer();

                        // Read values.
                        offer.Id = base.GetDataValue<int>(dr, "Id");
                        offer.OfferType = base.GetDataValue<string>(dr, "OfferType");
                        offer.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        offer.Description = base.GetDataValue<string>(dr, "Description");
                        offer.Offerees = base.GetDataValue<string>(dr, "Offerees");
                        offer.ExpiryDate = base.GetDataValue<DateTime>(dr, "ExpiryDate");
                        offer.CreatedDate = base.GetDataValue<DateTime>(dr, "CreatedDate");
                        offer.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        offer.Term = base.GetDataValue<int>(dr, "Term");
                        offer.Interest = base.GetDataValue<double>(dr, "Interest");
                        offer.Status = base.GetDataValue<string>(dr, "Status");
                        offer.PublicOffer = base.GetDataValue<string>(dr, "PublicOffer");
                        offer.PartialPay = base.GetDataValue<bool>(dr, "PartialPay");

                        // Add to List.
                        result.Add(offer);
                    }
                }
            }

            return result;
        }
        public List<Offer> GetAllOffers()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                " SELECT * FROM dbo.Offers offer " +
                " WHERE offer.ExpiryDate > @datetoday " +
                " ORDER BY offer.CreatedDate DESC ";

            List<Offer> result = new List<Offer>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@datetoday", DbType.Date, DateTime.Now.Date);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Offer
                        Offer offer = new Offer();

                        // Read values.
                        offer.Id = base.GetDataValue<int>(dr, "Id");
                        offer.OfferType = base.GetDataValue<string>(dr, "OfferType");
                        offer.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        offer.Description = base.GetDataValue<string>(dr, "Description");
                        offer.Offerees = base.GetDataValue<string>(dr, "Offerees");
                        offer.ExpiryDate = base.GetDataValue<DateTime>(dr, "ExpiryDate");
                        offer.CreatedDate = base.GetDataValue<DateTime>(dr, "CreatedDate");
                        offer.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        offer.Term = base.GetDataValue<int>(dr, "Term");
                        offer.Interest = base.GetDataValue<double>(dr, "Interest");
                        offer.Status = base.GetDataValue<string>(dr, "Status");
                        offer.PublicOffer = base.GetDataValue<string>(dr, "PublicOffer");
                        offer.PartialPay = base.GetDataValue<bool>(dr, "PartialPay");

                        // Add to List.
                        result.Add(offer);
                    }
                }
            }

            return result;
        }
        #endregion"Offers"
         
    }
}
