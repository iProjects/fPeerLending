//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 06/25/2014 06:55:39 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;
using fPeerLending.Entities;



namespace fPeerLending.Data
{
    /// <summary>
    /// spRoles data access component. Manages CRUD operations for the spRoles table.
    /// </summary>
    public partial class ContactUsDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the spRoles table.
        /// </summary>
        /// <param name="webpages_Role">A webpages_Role object.</param>
        /// <returns>An updated webpages_Role object.</returns>
        public ContactUs Create(ContactUs _ContactUs)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.ContactUs ([FirstName],[LastName],[Telephone],[Email],[Subject],[Comment]) " +
                "VALUES(@FirstName,@LastName,@Telephone,@Email,@Subject,@Comment); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@FirstName", DbType.String, _ContactUs.FirstName);
                db.AddInParameter(cmd, "@LastName", DbType.String, _ContactUs.LastName);
                db.AddInParameter(cmd, "@Telephone", DbType.String, _ContactUs.Telephone);
                db.AddInParameter(cmd, "@Email", DbType.String, _ContactUs.Email);
                db.AddInParameter(cmd, "@Subject", DbType.String, _ContactUs.Subject);
                db.AddInParameter(cmd, "@Comment", DbType.String, _ContactUs.Comment);

                // Get the primary key value.
                _ContactUs.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return _ContactUs;
        }

        /// <summary>
        /// Updates an existing row in the spRoles table.
        /// </summary>
        /// <param name="webpages_Role">A webpages_Role entity object.</param>
        public void UpdateById(ContactUs _ContactUs)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.ContactUs " +
                "SET " +
                    "[FirstName]=@FirstName, " +
                    "[LastName]=@LastName, " +
                    "[Telephone]=@Telephone, " +
                    "[Email]=@Email, " +
                    "[Subject]=@Subject, " +
                    "[Comment]=@Comment " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@FirstName", DbType.String, _ContactUs.FirstName);
                db.AddInParameter(cmd, "@LastName", DbType.String, _ContactUs.LastName);
                db.AddInParameter(cmd, "@Telephone", DbType.String, _ContactUs.Telephone);
                db.AddInParameter(cmd, "@Email", DbType.String, _ContactUs.Email);
                db.AddInParameter(cmd, "@Subject", DbType.String, _ContactUs.Subject);
                db.AddInParameter(cmd, "@Comment", DbType.String, _ContactUs.Comment);
                db.AddInParameter(cmd, "@Id", DbType.String, _ContactUs.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the spRoles table.
        /// </summary>
        /// <param name="roleId">A roleId value.</param>
        public void DeleteById(int Id)
        {
            const string SQL_STATEMENT = "DELETE dbo.ContactUs " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, Id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the spRoles table.
        /// </summary>
        /// <param name="roleId">A RoleId value.</param>
        /// <returns>A webpages_Role object with data populated from the database.</returns>
        public ContactUs SelectById(int Id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [FirstName],[LastName], [Telephone],[Email], [Subject], [Comment] " +
                "FROM dbo.ContactUs  " +
                "WHERE [Id]=@Id ";

            ContactUs _ContactUs = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, Id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new webpages_Role
                        _ContactUs = new ContactUs();

                        // Read values.
                        _ContactUs.Id = base.GetDataValue<int>(dr, "Id");
                        _ContactUs.FirstName = base.GetDataValue<string>(dr, "FirstName");
                        _ContactUs.LastName = base.GetDataValue<string>(dr, "LastName");
                        _ContactUs.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        _ContactUs.Email = base.GetDataValue<string>(dr, "Email");
                        _ContactUs.Subject = base.GetDataValue<string>(dr, "Subject");
                        _ContactUs.Comment = base.GetDataValue<string>(dr, "Comment");
                    }
                }
            }

            return _ContactUs;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the spRoles table.
        /// </summary>
        /// <returns>A collection of webpages_Role objects.</returns>		
        public List<ContactUs> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [FirstName],[LastName], [Telephone],[Email], [Subject], [Comment] " +
                "FROM dbo.ContactUs ";

            List<ContactUs> result = new List<ContactUs>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new webpages_Role
                        ContactUs _ContactUs = new ContactUs();

                        // Read values.
                        _ContactUs.Id = base.GetDataValue<int>(dr, "Id");
                        _ContactUs.FirstName = base.GetDataValue<string>(dr, "FirstName");
                        _ContactUs.LastName = base.GetDataValue<string>(dr, "LastName");
                        _ContactUs.Telephone = base.GetDataValue<string>(dr, "Telephone");
                        _ContactUs.Email = base.GetDataValue<string>(dr, "Email");
                        _ContactUs.Subject = base.GetDataValue<string>(dr, "Subject");
                        _ContactUs.Comment = base.GetDataValue<string>(dr, "Comment");

                        // Add to List.
                        result.Add(_ContactUs);
                    }
                }
            }

            return result;
        }





    }
}