//====================================================================================================
// Code generated with Motion: BC Gen (Build 2.2.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by fmuraya at SOFTBOOKSSERVER on 08/07/2013 13:52:25 
//====================================================================================================

using fPeerLending.Data;
using fPeerLending.Entities;
using fPeerLending.Framework; 
using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Runtime.Serialization;

using fanikiwaGL.Business;
using fanikiwaGL.Entities;
using fanikiwaGL.Framework;
using fCommon.Utility;
using fCommissions.Commission.Business;
using fMessagingSystem.Entities;


namespace fPeerLending.Business
{
    /// <summary>
    /// Withdraw business component.
    /// </summary>
    public partial class WithdrawComponent
    {
        public List<Transaction> Withdraw(int TransactionType,
    int DraccountID,
    int CrAccountID,
    decimal Amount,
    string Narr,
    string reference,
    string UserID,
    string Authorizer)
        {

            FinancialTransactionComponent fc = new FinancialTransactionComponent();
            return fc.CreateTransactionsFromTransactionType(
                  TransactionType,
              DraccountID,
              CrAccountID,
              Amount,
              Narr,
              reference,
              UserID,
              Authorizer);
        }

        //public List<Transaction> Withdraw(int TransactionTypeId,
        //    int accountID,
        //    decimal Amount,
        //    string Narr,
        //    string reference,
        //   string UserID,
        //   string Authorizer)
        //{
        //    /*
        //     * DR  accountID
        //     *  CR  MPESACASHACCOUNT
        //     * and recover commission if need be
        //     */
        //    //1. Get Account to put the money
        //    //throw the deposit in suspense if account does not exist
        //    int MainAccId = accountID;
        //    StaticTransactionsComponent sPostingClient = new StaticTransactionsComponent();
        //    if (!sPostingClient.AccountExists(MainAccId)) throw new ArgumentException("ACCOUNT [" + MainAccId + "] does not exist");

        //    //2. Get Contra Account 
        //    int ContraAccId = Convert.ToInt32(Config.GetInt(["MPESACASHACCOUNT"]);
        //    if (!sPostingClient.AccountExists(ContraAccId)) throw new ArgumentException("[MPESACASHACCOUNT] [" + ContraAccId + "] does not exist");

        //    //3. Get the transaction type
        //    TransactionType tt = sPostingClient.GetTransactionType(TransactionTypeId);

        //    WithdrawalTransaction dp = new WithdrawalTransaction(tt, "WIT",
        //        DateTime.Today,
        //        ContraAccId,
        //        MainAccId,
        //        Amount,
        //        false,
        //        "Y",
        //        UserID,
        //        Authorizer,
        //        reference);

        //    //4. Change the deposit transaction type with more details
        //    //eg a) dp.CommissionTransactionType = MPESACOMMACC


        //    //5.Get the GL transactions
        //    List<Transaction> txns = new List<Transaction>();
        //    NarrativeFormat fmt = new NarrativeFormat(tt);
        //    //5.1 change formatting of narratives here

        //    //5.2 Get transctions double entry
        //    DoubleEntry de = dp.GetDoubleEntry(fmt);
        //    if (de.Credit != null) txns.Add(de.Credit);
        //    if (de.Debit != null) txns.Add(de.Debit);

        //    //5.3 charge commission if need be

        //    if (tt.ChargeCommission)
        //    {
        //        DoubleEntry comm = dp.GetCommissionTransaction(fmt);
        //        if (comm.Credit != null) txns.Add(comm.Credit);
        //        if (comm.Debit != null) txns.Add(comm.Debit);
        //    }

        //    return txns;
        //}

    }


}