//====================================================================================================
// Code generated with Motion: BC Gen (Build 2.2.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by fmuraya at SOFTBOOKSSERVER on 08/03/2013 18:56:09 
//====================================================================================================

using System.Linq;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Serialization;
using fPeerLending.Entities;
using fPeerLending.Data;
using fanikiwaGL.Entities;
using fanikiwaGL.Business;
using fCommon.Utility;

namespace fPeerLending.Business
{
    /// <summary>
    /// Deposit business component.
    /// </summary>
    public partial class TransactionsComponent
    {
        int MaxListItems = 5;

        #region "TransactionTypes"
        public TransactionType CreateTransactionType(TransactionType txnType)
        {
            StaticTransactionsComponent sPostingClient = new StaticTransactionsComponent();

            TransactionType returnedTransactionType = sPostingClient.CreateTransactionType(txnType);
            return returnedTransactionType;
        }
        public TransactionType UpdateTransactionType(TransactionType txnType)
        {
            StaticTransactionsComponent sPostingClient = new StaticTransactionsComponent();

            TransactionType returnedTransactionType = sPostingClient.UpdateTransactionType(txnType);
            return returnedTransactionType;
        }
        public TransactionType SelectTransactionTypeById(int Id)
        {
            StaticTransactionsComponent sPostingClient = new StaticTransactionsComponent();

            return sPostingClient.GetTransactionType(Id);
        }
        public List<TransactionType> GetAllTransactionTypes()
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.GetAllTransactionTypes();
        }
        public List<TransactionType> GetNonCommTransactionTypes()
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.GetAllTransactionTypes().Where(i => i.ChargeCommission == false).ToList();
        }
        #endregion "TransactionTypes"

        #region "Transactions"
        public List<Transaction> GetAllTransactions()
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.GetAllTransactions();
        }
        #endregion "Transactions"

        #region Statements
        public string GetStatement(int accId, DateTime sdate, DateTime edate)
        {
            string st = string.Empty;
            StaticTransactionsComponent cl = new StaticTransactionsComponent();
            List<Transaction> txns = cl.SelectByAccountDateRange(accId, sdate, edate);
            if (txns.Count() == 0) return "No transactions found";
            int take = Config.GetInt("MaxListItems", MaxListItems);
            return TransactionsToString(txns.ToList(), take);
        }
        public string GetStatement(int accId, int take)
        {
            string st = string.Empty;
            StaticTransactionsComponent cl = new StaticTransactionsComponent();
            List<Transaction> txns = cl.SelectLastTranscations(accId, take);
            if (txns.Count() == 0) return "No transactions found";
            return TransactionsToString(txns.ToList());
        }

        public string TransactionsToString(List<Transaction> txns, int Take)
        {
            List<Transaction> s = txns.Take(Take).ToList();
            return TransactionsToString(txns);
        }

        public string TransactionsToString(List<Transaction> txns)
        {
            List<string> s = txns.Select(
                l => l.PostDate.ToShortDateString() + " " +
                    (l.Amount > 0 ? "IN" : "OUT") + " " +
                    (l.Amount.ToString("C"))
                ).ToList();
            return s.Aggregate((current, next) => current + "\n" + next);
        }
        public List<TransactionModel> GetAccountViewStatement(int accId, DateTime sdate, DateTime edate)
        {
            StaticTransactionsComponent cl = new StaticTransactionsComponent();
            int take = Config.GetInt("MaxListItems", MaxListItems);
            List<Transaction> txns = cl.SelectByAccountDateRange(accId, sdate, edate).Take(take).ToList();
            List<TransactionModel> txnsmodel = cl.ConvertTransactionsToTransactionsModel(txns);
            return txnsmodel.ToList();
        }
        public List<TransactionModel> GetAccountViewMiniStatement(int accId)
        {
            StaticTransactionsComponent cl = new StaticTransactionsComponent();
            int take = Config.GetInt("MaxListItems", MaxListItems);
            List<Transaction> txns = cl.SelectLastTranscations(accId, take);
            List<TransactionModel> txnsmodel = cl.ConvertTransactionsToTransactionsModel(txns);
            return txnsmodel.ToList();
        }
        #endregion

        public List<TransactionModel> GetAccountViewTransactionsByDate(int accountId, DateTime startDate, DateTime endtDate)
        {
            StaticTransactionsComponent sPostingClient = new StaticTransactionsComponent();

            List<TransactionModel> _lstTransactions = new List<TransactionModel>();
            _lstTransactions = sPostingClient.GetAccountViewTransactionsByDate(accountId, startDate, endtDate);

            return _lstTransactions;
        }
        public List<TransactionModel> GetViewTransactionsByContraReference(string ContraReference)
        {
            StaticTransactionsComponent sPostingClient = new StaticTransactionsComponent();

            List<TransactionModel> _lstTransactions = new List<TransactionModel>();
            _lstTransactions = sPostingClient.SelectByContraReferenceRange(ContraReference);

            return _lstTransactions;
        }


        #region "AccountTypes"
        public AccountType CreateAccountType(AccountType acctype)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.CreateAccountType(acctype);
        }
        public void UpdateAccountTypeByID(AccountType acctype)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            stc.UpdateAccountTypeByID(acctype);
        }
        public void DeleteAccountTypeById(int Id)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            stc.DeleteAccountTypeById(Id);
        }
        public List<AccountType> GetAllAccountTypes()
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.GetAllAccountTypes();
        }
        #endregion "AccountTypes"

        #region "Customers"
        public Customer CreateCustomer(Customer cust)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.CreateCustomer(cust);
        }
        public void UpdateCustomer(Customer cust)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            stc.UpdateCustomer(cust);
        }
        public void DeleteCustomer(int Id)
        {
            //StaticTransactionsComponent stc = new StaticTransactionsComponent();
            //stc.DeleteCustomer(Id);
        }
        public List<Customer> GetAllCustomers()
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.GetAllCustomers();
        }
        #endregion "Customers"

        #region "COAs"
        public COA CreateCOA(COA cust)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.CreateCOA(cust);
        }
        public void UpdateCOA(COA cust)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            stc.UpdateCOA(cust);
        }
        public void DeleteCOA(int Id)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            stc.DeleteCOA(Id);
        }
        public List<COA> GetAllCOAs()
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.GetAllCOAs();
        }
        #endregion "COAs"

        #region "TieredTables"
        public TieredTable CreateTieredTable(TieredTable tt)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.CreateTieredTable(tt);
        }
        public void UpdateTieredTable(TieredTable tt)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            stc.UpdateTieredTable(tt);
        }
        public void DeleteTieredTableById(int Id)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            stc.DeleteTieredTableById(Id);
        }
        public List<TieredTable> SelectTieredTables()
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.SelectTieredTables();
        }
        public TieredTable SelectTieredTableById(int Id)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.SelectTieredTableById(Id);
        }
        #endregion "TieredTables"

        #region "TieredDets"
        public TieredDet CreateTieredDet(TieredDet tt)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.CreateTieredDet(tt);
        }
        public void UpdateTieredDet(TieredDet tt)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            stc.UpdateTieredDet(tt);
        }
        public void DeleteTieredDetById(int Id)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            stc.DeleteTieredDetById(Id);
        }
        public List<TieredDet> SelectTieredDets()
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.SelectTieredDets();
        }
        public TieredDet SelectTieredDetById(int Id)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.SelectTieredDetById(Id);
        }
        public List<TieredDet> SelectTableTieredDets(int Id)
        {
            StaticTransactionsComponent stc = new StaticTransactionsComponent();
            return stc.SelectTableTieredDets(Id);
        }
        #endregion "TieredDets"





    }
}