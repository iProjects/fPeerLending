//====================================================================================================
// Code generated with Motion: BC Gen (Build 2.2.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by fmuraya at SOFTBOOKSSERVER on 08/03/2013 18:31:33 
//====================================================================================================

using fPeerLending.Data;
using fPeerLending.Entities;
using fPeerLending.Framework;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Linq;
using System.Windows;

using fanikiwaGL.Business;
using fanikiwaGL.Entities;
using fanikiwaGL.Framework;
using fCommon.Utility;
using fCommon.Extension_Methods;
using fCommissions.Commission.Business;
using fMessagingSystem.Entities;
using fanikiwaGL.Framework.ExceptionTypes;

namespace fPeerLending.Business
{
    /// <summary>
    /// MakeOffer business component.
    /// </summary>
    public partial class MakeOfferComponent
    {
        public OfferReceipient CreateOfferReceipient(OfferReceipient or)
        {
            OfferReceipientDAC orDac = new OfferReceipientDAC();
            return orDac.Create(or);
        }

        /// <summary>
        /// MakeOffer business method. 
        /// </summary>
        /// <param name="offerModel">A offer value.</param>
        /// <param name="offerReceipient">A offerReceipient value.</param>
        /// <returns>Returns a Offer object.</returns>
        /// 
        private Offer MakeOffer(Offer offer)
        {
            RegistrationComponent rc = new RegistrationComponent();

            Offer result = default(Offer);

            // Data access component declarations.
            OfferDAC _OfferDAC = new OfferDAC();

            // Step 1 - Calling Create on OfferDAC.
            result = _OfferDAC.Create(offer);
            return result;
        }

        private Offer MakeOffer(OfferModel offerModel)
        {
            Offer offer = new Offer();
            //get offer from offermodel
            offer.Amount = offerModel.Amount;
            offer.CreatedDate = offerModel.CreatedDate ;
            offer.Description = offerModel.Description;
            offer.ExpiryDate = offerModel.ExpiryDate;
            offer.Id = offerModel.Id;
            offer.Interest = offerModel.Interest;
            offer.MemberId = offerModel.MemberId;
            offer.OfferType = offerModel.OfferType;
            offer.PartialPay = offerModel.PartialPay;
            offer.PublicOffer = offerModel.PublicOffer;
            offer.Status = offerModel.Status;
            offer.Term = offerModel.Term;
            
            Offer result = MakeOffer(offer);

            // Step 2 - Calling Create OfferReceipient from offeree.
            //if (!offer.PublicOffer.ToUpper().Equals("B")) //this is not a public offer, so create recipients
            //{
            //    foreach(var r in offerModel.Reciepients)
            //    {
            //    CreateReceipient(offer, r);
            //    }
            //}
            return result;

        }
        private void CreateReceipient(Offer offer, Offeree offeree)
        {
            if (offeree is GroupOfferee )
            {
                //it must be a group
                CreateReceipientsFromGroup(offer, (GroupOfferee)offeree);
            }
            else 
            {
                CreateReceipientFromOfferee(offer, offeree);
            }

        }

        private Member CreateMemberByOfferee(Offeree offeree, int MemberId)
        {
            Member m = new Member();
            m.Status = "D";//disabled member
            m.RefferedBy = MemberId;

            if (offeree is TelephoneOfferee) //we assume all phone numbers are numeric
            {
               m.Telephone = ((TelephoneOfferee)offeree).Telephone;
            }
            else if (offeree is EmailOfferee)
            {
                string email = ((EmailOfferee)offeree).Email;
                m.Surname = email.Split('@')[0];
                m.Email = email;
            }
            
            return m;
        }

        private Member GetMemberByOfferee(Offeree offeree)
        {
            MemberDAC _MemberDAC = new MemberDAC();
            Member member = default(Member);

            if (offeree is TelephoneOfferee) //we assume all phone numbers are numeric
            {
                member = _MemberDAC.SelectByTelephone(((TelephoneOfferee) offeree).Telephone);
            }
            else if (offeree is EmailOfferee)
            {
                member = _MemberDAC.SelectByEmail(((EmailOfferee)offeree).Email);
            }
            else if (offeree is MemberOfferee)
            {
                member = _MemberDAC.SelectById(((MemberOfferee)offeree).MemberId);
            }
            return member;
        }
        
        private void CreateReceipientsFromGroup(Offer offer, GroupOfferee offeree)
        {
            /*
             *Foreach var gmember in GetAllGroupMembers(Offeree.MailingGroup)
             *      if var gmember is GroupOfferee
             *           CreateReceipientsFromGroup(offerModel, gmember)
             *      else
             *          CreateReceipientFromOfferee(offerModel, gmember);
             *          
             * or 
             * 
             * Foreach var gmember in GetFlattenedGroupMembers(Offeree.MailingGroup)
             *     CreateReceipientFromOfferee(offerModel, gmember);
             * 
             */
            MailingGroupMemberDAC mgmDac = new MailingGroupMemberDAC();

            foreach (var gmember in mgmDac.SelectFlattenedGroupMembers(offeree.MailingGroup))
                CreateReceipientFromOfferee(offer, new MemberOfferee(gmember.Member));
        }
        
        private void CreateReceipientFromOfferee(Offer offer, Offeree offeree)
        {
            Member member = GetMemberByOfferee(offeree);

            if (member == null)
            {
                //the email provided does not exist what to do?
                //do what the config says you do
                /*
                 * 1. Skip the nonexistent email
                 * 2. create a member and post the offer there, the member will see it whenever they 
                 * shall activate their accounts
                 */
                string action = Config.GetString("INVITEEDOESNTEXISTACTION");
                switch (action.ToLower())
                {
                    case "skip":
                        return;

                    case "create":
                         //null anyway
                        member = CreateMemberByOfferee(offeree, offer.MemberId);
                        RegistrationComponent rc = new RegistrationComponent();
                        member = rc.Register(member);
                        break;
                }
            }

            if (member != null)
            {
                //create new recipient
                OfferReceipient offerReceipient = new OfferReceipient();
                offerReceipient.MemberId = member.MemberId;
                offerReceipient.OfferId = offer.Id;

                OfferReceipientDAC offerReceipientDAC = new OfferReceipientDAC();
                offerReceipientDAC.Create(offerReceipient);
            }
        }

        private void CreateReceipientFromMailingGroup(string mailinggroup, Offer offer)
        {
            //create new recipient
            OfferReceipient offerReceipient = new OfferReceipient();

            offerReceipient.OfferId = offer.Id;

            OfferReceipientDAC offerReceipientDAC = new OfferReceipientDAC();
            offerReceipientDAC.Create(offerReceipient);
        }
        
        #region Inform

        /*
        public void InformLenderAndBorrower(Member receipient, Offer offer)
        {
            MessagerComponent mclient = new MessagerComponent();
             
            List<Message> msgs = new List<Message>();
            MemberDAC _MemberDAC = new MemberDAC();

            switch (offer.OfferType.ToString())
            {
                case "L":
                    //get the lender from the offer                    
                    Member lender = _MemberDAC.SelectById(offer.MemberId);
                    //create message for borrower
                    Message bsg = CreateBorrowerMessage(receipient, lender, offer);
                    msgs.Add(bsg);
                    break;
                case "B":
                    //get the lender from the offer                    
                    Member borrower = _MemberDAC.SelectById(offer.MemberId);
                    //create message for lender
                    Message lsg = CreateLenderMessage(borrower, receipient, offer);
                    msgs.Add(lsg);
                    break;
            }

            //call messaging service to send the list of messages     
            mclient.SendListMessage(msgs);
        }
        */
        private Message CreateBorrowerMessage(Member borrower, Member lender, Offer o)
        {
            Message ret = null;
            string msg = "Dear " + borrower.Surname + " " + borrower.OtherNames + "\n\nYou have a Lend offer of kshs " + o.Amount + " from " + lender.Surname + " " + lender.OtherNames + "\n\nRegards, \nFanikiwa";

            string fanikiwaTelno = Config.GetString("FANIKIWATELNO");
            string fanikiwaEmail = Config.GetString("FANIKIWAEMAIL");

            if (borrower.InformBy != null && "SMS".Equals(borrower.InformBy.ToUpper()))
            {

                ret = this.CreateSMS(fanikiwaTelno, borrower.Telephone, msg);

            }
            else if (borrower.InformBy != null && "EMAIL".Equals(borrower.InformBy.ToUpper()))
            {

                ret = this.CreateEmail(fanikiwaEmail, borrower.Email, msg);
            }
            else
            {
                ret = this.CreateEmail(fanikiwaEmail, borrower.Email, msg);
            }
            return ret;
        }
        private Message CreateLenderMessage(Member borrower, Member lender, Offer o)
        {
            Message ret = null;
            string msg = "Dear " + lender.Surname + " " + lender.OtherNames + "\n\nYou have a borrow offer of ksh " + o.Amount + " from " + borrower.Surname + " " + borrower.OtherNames + "\n\nRegards, \nFanikiwa";

            string fanikiwaTelno = Config.GetString("FANIKIWATELNO");
            string fanikiwaEmail = Config.GetString("FANIKIWAEMAIL");

            if (lender.InformBy != null && "SMS".Equals(lender.InformBy.ToUpper()))
            {

                ret = this.CreateSMS(fanikiwaTelno, lender.Telephone, msg);

            }
            else if (lender.InformBy != null && "EMAIL".Equals(lender.InformBy.ToUpper()))
            {

                ret = this.CreateEmail(fanikiwaEmail, lender.Email, msg);
            }
            else
            {
                ret = this.CreateEmail(fanikiwaEmail, lender.Email, msg);
            }
            return ret;

        }
        private SMSMessage CreateSMS(string fromTelno, string toTelno, string msg)
        {
            if (string.IsNullOrEmpty(fromTelno))
                throw new ArgumentNullException("fromTelno");
            if (string.IsNullOrEmpty(toTelno))
                throw new ArgumentNullException("toTelno");

            if (string.IsNullOrEmpty(msg))
                throw new ArgumentNullException("msg");

            SMSMessage sms = new SMSMessage();
            sms.addressFrom = fromTelno;
            sms.addressTo = toTelno;
            sms.messageDate = DateTime.Today;
            sms.Body = msg;

            return sms;
        }


        private EmailMessage CreateEmail(string addressFrom, string addressTo, string msg)
        {
            if (string.IsNullOrEmpty(addressFrom))
                throw new ArgumentNullException("addressFrom");
            if (string.IsNullOrEmpty(addressTo))
                throw new ArgumentNullException("addressTo");

            if (string.IsNullOrEmpty(msg))
                throw new ArgumentNullException("msg");

            EmailMessage email = new EmailMessage();
            email.addressFrom = addressFrom;
            email.addressTo = addressTo;
            email.messageDate = DateTime.Today;
            email.subject = "Fanikiwa Offer";
            email.Body = msg;

            return email;
        }
        #endregion

        /// <summary>
        /// MakeBorrowOffer business method. 
        /// </summary>
        /// <param name="offer">A offer value.</param>
        /// <param name="offerReceipient">A offerReceipient value.</param>
        public Offer MakeBorrowOffer(OfferModel offer)
        {
            return this.MakeOffer(offer);
        }
        public Offer MakeBorrowOffer(Offer offer)
        {
            return this.MakeOffer(offer);
        }

        /// <summary>
        /// MakeLendOffer business method. 
        /// </summary>
        /// <param name="offer">A offer value.</param>
        /// <param name="offerReceipient">A offerReceipient value.</param>
        /// 
        //public Offer MakeLendOffer(Offer offer)
        //{
        //    return this.MakeOffer(offer);
        //}
        public Offer MakeLendOffer(OfferModel offerModel)
        {
            // Step 1 - Block funds.
            MemberDAC _MemberDAC = new MemberDAC();

            Member member = _MemberDAC.SelectById(offerModel.MemberId);

            // calls GLs funds block service.
            StaticTransactionsComponent sPostingClient = new StaticTransactionsComponent();
            if (sPostingClient.GetAvailableBalance(member.CurrentAccountId) < offerModel.Amount)
                throw new StaticPostingException("Insufficient funds");

            //BlockFunds function checks all account status before the actual block
            sPostingClient.BlockFunds(member.CurrentAccountId, offerModel.Amount);


            // Step 2 - Calling Create on Offer.
            return this.MakeOffer(offerModel);
        }




    }

}

   